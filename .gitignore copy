# ===============================================
# üéØ AI ORDERBOOK TRADING PROJECT - GITIGNORE
# ===============================================
# 
# ‚úÖ –í–ê–ñ–ù–´–ï –ü–ê–ü–ö–ò (–ù–ï –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è):
# - tests/ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã
# - reports/ - –∫–ª—é—á–µ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
# - config/ - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
# - trading_config/ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
# - scripts/ - –≤–∞–∂–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

# Tardis –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
copilot/tmp/
copilot/experiments/tardis/reports/*.status.json
copilot/experiments/tardis/reports/impulse_scan_*.json
copilot/experiments/tardis/reports/*.jsonl
copilot/experiments/tardis/datasets_probe/
*.json
*.jsonl
# - docs/ - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
# - online_learning_system/ - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã
# - training_interface/ - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –æ–±—É—á–µ–Ω–∏—è
# - ai_copilot.py - –≥–ª–∞–≤–Ω—ã–π AI –º–æ–¥—É–ª—å
# - autonomous_trading_*.py - –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
# - requirements.txt - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
# - .env.example - –ø—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
# 
# ‚ùå –ò–ì–ù–û–†–ò–†–£–ï–ú–´–ï –ü–ê–ü–ö–ò (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ):
# - logs/ - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏
# - datasets/ - –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
# - trained_models/ - –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
# - training_results/ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
# - venv/ - –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞
# - __pycache__/ - –∫–µ—à Python
# ===============================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# üîê SECURITY: API –∫–ª—é—á–∏ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
.env
.env.local
.env.production
*.key
*.secret
api_keys.txt
credentials.json

# üìä Trading logs –∏ –¥–∞–Ω–Ω—ã–µ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏)
live_trading_*.log
trading_logs/
*.csv
*.xlsx
backtest_results/
daily_reports/
logs/
online_learning.log

# üíæ –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–æ–≤ –∏ –∞—Ä—Ö–∏–≤—ã
validation/evidence/backups/*.zip
validation/evidence/backups/*.tar.gz
*.zip
*.tar.gz
*.rar
# –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ 100MB –¥–ª—è GitHub
**/*backup*.zip
*.log

# üìß –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ—á—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
local_mail/

# ü§ñ ML –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –ø—Ä–∏–º–µ—Ä–æ–≤)
trained_models/
training_results/
datasets/
copilot_data/
*.pkl
*.h5
*.model
*.weights
*.joblib

# üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ cache
*.db
*.sqlite
*.sqlite3
.cache/
__pycache__/

# üèóÔ∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
venv/
.venv/
env/
.env/

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is preferred to use this approach instead of the items below.
.idea/

# Visual Studio Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# MacOS
.DS_Store
.AppleDouble
.LSOverride

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

# Project specific (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞–ø–∫–∏)
# datasets/ - —É–∂–µ –≤—ã—à–µ
# trained_models/ - —É–∂–µ –≤—ã—à–µ
# training_results/ - —É–∂–µ –≤—ã—à–µ
# backtesting_results/ - —É–∂–µ –≤—ã—à–µ
# trading_logs/ - —É–∂–µ –≤—ã—à–µ
# *.pkl - —É–∂–µ –≤—ã—à–µ
# *.h5 - —É–∂–µ –≤—ã—à–µ
# *.model - —É–∂–µ –≤—ã—à–µ
# *.weights - —É–∂–µ –≤—ã—à–µ

# üìÅ –í–∞–∂–Ω—ã–µ –ø–∞–ø–∫–∏ –ù–ï –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º:
# tests/ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
# reports/ - –∫–ª—é—á–µ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
# config/ - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# trading_config/ - —Ç–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# scripts/ - –≤–∞–∂–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
# docs/ - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
# online_learning_system/ - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
# training_interface/ - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

# üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
.pytest_cache/
.temp/
*.tmp
*.temp
FINAL_SYSTEM_ASSESSMENT_*.json
*.generated.*

# Streamlit
.streamlit/

# API keys and secrets
.env
secrets.json
config.json
api_keys.txt

# Logs (—É–∂–µ —É–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ)
# *.log - —É–∂–µ –≤—ã—à–µ
# logs/ - —É–∂–µ –≤—ã—à–µ

# Cache (—É–∂–µ —É–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ)
# .cache/ - —É–∂–µ –≤—ã—à–µ
# __pycache__/ - —É–∂–µ –≤—ã—à–µ

# Temporary files
*.tmp
*.temp
.temp/

# Generated files
*.generated.*

# Backup files
*.bak
*.backup
*~

# Node.js (if using any JS tools)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# ===============================================
# üìä PROJECT SPECIFIC TEMPORARY FILES 
# ===============================================

# üìã Project readiness reports (temporary)
PROJECT_READINESS_BRIEF_*.md
project_readiness_report_*.json

# üõ°Ô∏è Anti-fraud detection reports (temporary)
anti_pseudo_algorithmic_report_*.json
anti_pseudo_algorithmic_summary_*.txt
specialized_pseudo_fraud_report_*.json
specialized_pseudo_fraud_summary_*.txt

# üîß High-speed components (temporary/development)
high_speed_impulse_detector.py
binance_speed_analyzer.py
test_websocket_connection.py
send_tester_critical_report.py

# üìù Test reports (temporary)
test_report_*.md

# üìß Mail system data
mails/
copilot/state/runtime_state.json
