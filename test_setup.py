#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É API –∫–ª—é—á–µ–π –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WebSocket.
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent))

from collector.config.settings import load_config, get_api_credentials


async def test_api_keys():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–µ–π."""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–µ–π...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    api_creds = config.get('api_credentials', {})
    
    print(f"üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ testnet: {config.get('api', {}).get('use_testnet', True)}")
    print(f"üîó WebSocket URL: {api_creds.get('ws_url', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
    print(f"üè≠ –†–µ–∂–∏–º: {'PRODUCTION' if not config.get('api', {}).get('use_testnet', True) else 'TESTNET'}")
    
    if api_creds.get('api_key'):
        api_key = api_creds['api_key']
        print(f"‚úÖ API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {api_key[:8]}...{api_key[-4:]}")
    else:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    if api_creds.get('secret_key'):
        secret = api_creds['secret_key']
        print(f"‚úÖ Secret –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {secret[:8]}...{secret[-4:]}")
    else:
        print("‚ùå Secret –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Tardis API
    tardis_key = config.get('tardis_api_key', '')
    if tardis_key:
        print(f"‚úÖ Tardis API –∫–ª—é—á: {tardis_key[:8]}...{tardis_key[-4:]}")
    else:
        print("‚ùå Tardis API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def test_websocket_connection():
    """–¢–µ—Å—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ websockets
        import websockets
        print("‚úÖ –ú–æ–¥—É–ª—å websockets –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        api_creds = config.get('api_credentials', {})
        ws_url = api_creds.get('ws_url', 'wss://stream.binancefuture.com/ws/')
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        test_url = f"{ws_url}btcusdt@depth"
        print(f"üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫: {test_url}")
        
        async with websockets.connect(test_url, ping_timeout=5) as websocket:
            print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            message = await asyncio.wait_for(websocket.recv(), timeout=10)
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(message)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å websockets –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install websockets")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


async def test_data_directories():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    config = load_config()
    base_dir = Path(config.get('storage', {}).get('base_dir', './data/binance_orderbook'))
    logs_dir = Path('collector/logs')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    base_dir.mkdir(parents=True, exist_ok=True)
    logs_dir.mkdir(parents=True, exist_ok=True)
    
    print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {base_dir}")
    print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {logs_dir}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –°–ë–û–†–ê –î–ê–ù–ù–´–• BINANCE ORDERBOOK")
    print("=" * 60)
    
    try:
        await test_api_keys()
        await test_data_directories()
        await test_websocket_connection()
        
        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
        print("\nüí° –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å:")
        print("   python -m collector.main --symbol BTCUSDT --output-dir ./data --test-mode")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())