"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ orderbook.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CSV —Ñ–∞–π–ª—ã –∏ PostgreSQL —Ö—Ä–∞–Ω–µ–Ω–∏–µ.
"""

import asyncio
import csv
import gzip
import json
import logging
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, Optional, List, Union, TextIO
from io import TextIOWrapper

# PostgreSQL –ø–æ–¥–¥–µ—Ä–∂–∫–∞
try:
    from .postgres_manager import PostgreSQLManager, OrderBookData, create_orderbook_data
    POSTGRES_AVAILABLE = True
except ImportError:
    POSTGRES_AVAILABLE = False


class DataManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ orderbook.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - CSV —Ñ–∞–π–ª—ã —Å —Å–∂–∞—Ç–∏–µ–º –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π
    - PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å batch –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    """
    
    def __init__(self, output_dir: str, compress: bool = True, config: Optional[Dict[str, Any]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (CSV —Ä–µ–∂–∏–º)
            compress: –í–∫–ª—é—á–∏—Ç—å —Å–∂–∞—Ç–∏–µ —Ñ–∞–π–ª–æ–≤ (CSV —Ä–µ–∂–∏–º)
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        """
        self.output_dir = Path(output_dir)
        self.compress = compress
        self.config = config or {}
        self.logger = logging.getLogger(__name__)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è
        storage_config = self.config.get('storage', {})
        self.storage_type = storage_config.get('type', 'csv')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL Manager
        self.postgres_manager = None
        if self.storage_type == 'postgresql' and POSTGRES_AVAILABLE:
            self._init_postgresql()
        else:
            self._init_csv_storage()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –¥–ª—è CSV
        self.rotation_hours = storage_config.get('rotation_hours', 24)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è CSV
        self.current_file: Optional[Union[TextIO, TextIOWrapper]] = None
        self.current_writer = None
        self.file_rotation_time = None
        self.buffer = []
        self.buffer_size = storage_config.get('buffer_size', 1000)
        self.records_written = 0
        self.files_created = 0  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
    
    def _init_postgresql(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PostgreSQL –∏–∑ .env –∏–ª–∏ config
            db_config = self.config.get('database', {})
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if not db_config.get('host'):
                import os
                db_config = {
                    'host': os.getenv('DB_HOST'),
                    'port': int(os.getenv('DB_PORT', 25060)),
                    'name': os.getenv('DB_NAME'),
                    'user': os.getenv('DB_USER'),
                    'password': os.getenv('DB_PASSWORD'),
                    'batch_size': self.config.get('storage', {}).get('batch_size', 100),
                    'flush_interval': self.config.get('storage', {}).get('flush_interval', 5),
                    'pool_size': self.config.get('postgresql', {}).get('pool_size', 20)
                }
            
            self.postgres_manager = PostgreSQLManager(db_config)
            self.logger.info("üóÑÔ∏è PostgreSQL –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PostgreSQL: {e}")
            self.logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ CSV —Ä–µ–∂–∏–º")
            self.storage_type = 'csv'
            self._init_csv_storage()
    
    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if self.postgres_manager:
            try:
                await self.postgres_manager.initialize()
                self.logger.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è PostgreSQL: {e}")
                self.storage_type = 'csv'
                self._init_csv_storage()
    
    def _init_csv_storage(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.output_dir.mkdir(parents=True, exist_ok=True)
        self.logger.info(f"üìÅ CSV —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {self.output_dir}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.records_written = 0
        self.files_created = 0
        
        # CSV –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.csv_headers = [
            'exchange', 'symbol', 'timestamp', 'local_timestamp',
            'ask_amount', 'ask_price', 'bid_price', 'bid_amount'
        ]
        
    async def save_record(self, record: Dict[str, Any]) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ orderbook.
        
        Args:
            record: –ó–∞–ø–∏—Å—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            if self.storage_type == 'postgresql' and self.postgres_manager:
                await self._save_to_postgresql(record)
            else:
                await self._save_to_csv(record)
                
        except Exception as e:
            self.logger.error(f"Error saving record: {e}")
    
    async def _save_to_postgresql(self, record: Dict[str, Any]) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ PostgreSQL.
        
        Args:
            record: –ó–∞–ø–∏—Å—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        if not self.postgres_manager:
            self.logger.error("PostgreSQL manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            await self._save_to_csv(record)
            return
            
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –∏–∑ –∑–∞–ø–∏—Å–∏
            symbol = record.get('symbol', 'UNKNOWN')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ OrderBookData
            orderbook_data = create_orderbook_data(symbol, record)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PostgreSQL –º–µ–Ω–µ–¥–∂–µ—Ä
            success = await self.postgres_manager.store_orderbook(orderbook_data)
            
            if success:
                self.records_written += 1
            
        except Exception as e:
            self.logger.error(f"Error saving to PostgreSQL: {e}")
            # Fallback –Ω–∞ CSV –µ—Å–ª–∏ PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            self.logger.warning("üìù –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ CSV —Ä–µ–∂–∏–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ PostgreSQL")
            self.storage_type = 'csv'
            await self._save_to_csv(record)
    
    async def _save_to_csv(self, record: Dict[str, Any]) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ CSV —Ñ–∞–π–ª.
        
        Args:
            record: –ó–∞–ø–∏—Å—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–æ—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
        await self._check_file_rotation(record)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        self.buffer.append(record)
        
        # –ó–∞–ø–∏—Å—å –±—É—Ñ–µ—Ä–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        if len(self.buffer) >= self.buffer_size:
            await self._flush_buffer()
            
    async def _check_file_rotation(self, record: Dict[str, Any]) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.
        
        Args:
            record: –¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å
        """
        current_time = datetime.now()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏:
        # 1. –§–∞–π–ª –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
        # 2. –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º—è —Ä–æ—Ç–∞—Ü–∏–∏
        if (self.current_file is None or 
            (self.file_rotation_time and current_time >= self.file_rotation_time)):
            
            await self._close_current_file()
            await self._create_new_file(record)
            
    async def _create_new_file(self, record: Dict[str, Any]) -> None:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏.
        
        Args:
            record: –¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞)
        """
        try:
            current_time = datetime.now()
            symbol = record.get('symbol', 'UNKNOWN')
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            timestamp_str = current_time.strftime('%Y%m%d_%H%M%S')
            filename = f"{symbol}_orderbook_{timestamp_str}.csv"
            
            if self.compress:
                filename += ".gz"
            
            filepath = self.output_dir / filename
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
            if self.compress:
                self.current_file = gzip.open(filepath, 'wt', encoding='utf-8')
            else:
                self.current_file = open(filepath, 'w', encoding='utf-8')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ CSV writer
            self.current_writer = csv.DictWriter(
                self.current_file, 
                fieldnames=self.csv_headers
            )
            
            # –ó–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            self.current_writer.writeheader()
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ—Ç–∞—Ü–∏–∏
            self.file_rotation_time = current_time + timedelta(hours=self.rotation_hours)
            
            self.files_created += 1
            self.logger.info(f"üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            self.logger.error(f"Error creating new file: {e}")
            
    async def _flush_buffer(self) -> None:
        """
        –ó–∞–ø–∏—Å—å –±—É—Ñ–µ—Ä–∞ –Ω–∞ –¥–∏—Å–∫.
        """
        if not self.buffer or not self.current_writer or not self.current_file:
            return
            
        try:
            # –ó–∞–ø–∏—Å—å –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –±—É—Ñ–µ—Ä–∞
            for record in self.buffer:
                self.current_writer.writerow(record)
                
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –¥–∏—Å–∫
            self.current_file.flush()
            
            self.records_written += len(self.buffer)
            self.buffer.clear()
            
        except Exception as e:
            self.logger.error(f"Error flushing buffer: {e}")
            
    async def _close_current_file(self) -> None:
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞.
        """
        try:
            # –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—É—Ñ–µ—Ä–∞
            await self._flush_buffer()
            
            if self.current_file:
                self.current_file.close()
                self.current_file = None
                self.current_writer = None
                
        except Exception as e:
            self.logger.error(f"Error closing file: {e}")
            
    async def shutdown(self) -> None:
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        """
        self.logger.info("Shutting down data manager")
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã PostgreSQL
        if self.postgres_manager:
            await self.postgres_manager.close()
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã CSV
        await self._close_current_file()
        
        self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.records_written} –∑–∞–ø–∏—Å–µ–π, {getattr(self, 'files_created', 0)} —Ñ–∞–π–ª–æ–≤")
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        stats = {
            'storage_type': self.storage_type,
            'records_written': self.records_written,
            'files_created': getattr(self, 'files_created', 0),
            'buffer_size': len(self.buffer)
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ PostgreSQL
        if self.postgres_manager:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                pg_stats = {
                    'successful_inserts': getattr(self.postgres_manager, '_stats', {}).get('successful_inserts', 0),
                    'failed_inserts': getattr(self.postgres_manager, '_stats', {}).get('failed_inserts', 0),
                    'batch_size': getattr(self.postgres_manager, '_batch_size', 0),
                    'buffer_length': len(getattr(self.postgres_manager, '_batch_buffer', []))
                }
                stats['postgresql'] = pg_stats
            except Exception:
                pass
        
        return stats