#!/usr/bin/env python3
"""
üöÄ Multi-Stream Market Data Collector
–°–±–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance –ø–æ 200+ –ø–∞—Ä–∞–º –≤ PostgreSQL

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- bookTicker (top-of-book) 
- aggTrade (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏)
- depth@100ms (–≥–ª—É–±–∏–Ω–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è —Ç–æ–ø-–ø–∞—Ä)
- –®–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
- Batch PostgreSQL ingestion
- –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
"""

import asyncio
import asyncpg
import json
import logging
import websockets
import time
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any, Set
from dataclasses import dataclass, asdict
from contextlib import asynccontextmanager
import signal
import sys
from pathlib import Path
import os

# –ü–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.production –∏–ª–∏ .env (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
try:
    from collector.config.settings import load_env_file
    _root = Path(__file__).resolve().parents[2]
    for _candidate in [
        _root / ".env.production",
        _root / ".env"
    ]:
        if _candidate.exists():
            load_env_file(str(_candidate))
            break
except Exception:
    # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –º–æ–¥—É–ª—å/—Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚Äî –æ–∫—Ä—É–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –∑–∞–¥–∞–Ω–æ —Å–Ω–∞—Ä—É–∂–∏
    pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('logs/multistream_collector.log')
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class MarketDataEvent:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è market data —Å–æ–±—ã—Ç–∏–π"""
    symbol: str
    exchange: str
    ts_exchange: datetime
    ts_ingest: datetime
    event_type: str  # 'bookTicker', 'aggTrade', 'depthUpdate'

@dataclass 
class BookTickerEvent(MarketDataEvent):
    """–°–æ–±—ã—Ç–∏–µ bookTicker"""
    update_id: Optional[int]
    best_bid: float
    best_ask: float
    bid_qty: float
    ask_qty: float
    
    @property
    def spread(self) -> float:
        return self.best_ask - self.best_bid
    
    @property
    def mid(self) -> float:
        return (self.best_ask + self.best_bid) / 2

@dataclass
class TradeEvent(MarketDataEvent):
    """–°–æ–±—ã—Ç–∏–µ aggTrade"""
    agg_trade_id: int
    price: float
    qty: float
    is_buyer_maker: bool

@dataclass
class DepthEvent(MarketDataEvent):
    """–°–æ–±—ã—Ç–∏–µ depth update"""
    first_update_id: int
    final_update_id: int
    prev_final_update_id: Optional[int]
    bids: List[List[str]]  # [[price, qty], ...]
    asks: List[List[str]]  # [[price, qty], ...]

@dataclass
class MarkPriceEvent(MarketDataEvent):
    """–°–æ–±—ã—Ç–∏–µ mark price / index price"""
    event_type: Optional[str]
    mark_price: Optional[float]
    index_price: Optional[float]
    est_settlement_price: Optional[float]
    funding_rate: Optional[float]
    next_funding_time: Optional[datetime]

@dataclass
class ForceOrderEvent(MarketDataEvent):
    """–°–æ–±—ã—Ç–∏–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ (forceOrder)"""
    event_type: Optional[str]
    side: Optional[str]   # BUY/SELL
    price: Optional[float]
    qty: Optional[float]
    raw: dict

class SymbolManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self, pg_pool: asyncpg.Pool):
        self.pg_pool = pg_pool
        self.symbols: Dict[str, int] = {}  # symbol -> symbol_id
        self.top_symbols: Set[str] = set()  # –¢–æ–ø —Å–∏–º–≤–æ–ª—ã –¥–ª—è depth
        
    async def load_symbols(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –ë–î"""
        async with self.pg_pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT id, symbol FROM marketdata.symbols 
                WHERE is_active = true AND exchange = 'binance-futures'
            """)
            
        self.symbols = {row['symbol']: row['id'] for row in rows}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø-—Å–∏–º–≤–æ–ª—ã –¥–ª—è depth (–ø–æ–∫–∞ —Ç–æ–ø-10)
        top_symbols_list = [
            'BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'ADAUSDT', 'DOTUSDT',
            'BNBUSDT', 'XRPUSDT', 'AVAXUSDT', 'MATICUSDT', 'LINKUSDT'
        ]
        self.top_symbols = {s for s in top_symbols_list if s in self.symbols}
        
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(self.symbols)}")
        logger.info(f"üîù –¢–æ–ø-—Å–∏–º–≤–æ–ª—ã –¥–ª—è depth: {list(self.top_symbols)}")

class BatchProcessor:
    """Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∑–∞–ø–∏—Å—å –≤ PostgreSQL"""
    
    def __init__(self, pg_pool: asyncpg.Pool, batch_size: int = 100):
        self.pg_pool = pg_pool
        self.batch_size = batch_size
        self.buffers = {
            'book_ticker': [],
            'trades': [],
            'depth_events': [],
            'mark_price': [],
            'force_orders': []
        }
        self.stats = {
            'book_ticker': {'processed': 0, 'failed': 0},
            'trades': {'processed': 0, 'failed': 0},
            'depth_events': {'processed': 0, 'failed': 0},
            'mark_price': {'processed': 0, 'failed': 0},
            'force_orders': {'processed': 0, 'failed': 0}
        }
        
    async def add_event(self, event: MarketDataEvent, symbol_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –±—É—Ñ–µ—Ä"""
        try:
            if isinstance(event, BookTickerEvent):
                self.buffers['book_ticker'].append((
                    event.ts_exchange, event.ts_ingest, symbol_id, event.update_id,
                    event.best_bid, event.best_ask, event.bid_qty, event.ask_qty,
                    event.spread, event.mid
                ))
                
            elif isinstance(event, TradeEvent):
                self.buffers['trades'].append((
                    event.ts_exchange, event.ts_ingest, symbol_id, event.agg_trade_id,
                    event.price, event.qty, event.is_buyer_maker
                ))
                
            elif isinstance(event, DepthEvent):
                self.buffers['depth_events'].append((
                    event.ts_exchange, event.ts_ingest, symbol_id,
                    event.first_update_id, event.final_update_id, event.prev_final_update_id,
                    json.dumps(event.bids), json.dumps(event.asks)
                ))
            elif isinstance(event, MarkPriceEvent):
                self.buffers['mark_price'].append((
                    event.ts_exchange, event.ts_ingest, symbol_id,
                    event.event_type, event.mark_price, event.index_price,
                    event.est_settlement_price, event.funding_rate, event.next_funding_time
                ))
            elif isinstance(event, ForceOrderEvent):
                self.buffers['force_orders'].append((
                    event.ts_exchange, event.ts_ingest, symbol_id,
                    event.side, event.price, event.qty, json.dumps(event.raw)
                ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å flush
            for table_name, buffer in self.buffers.items():
                if len(buffer) >= self.batch_size:
                    await self._flush_buffer(table_name)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {event.event_type}: {e}")
            
    async def _flush_buffer(self, table_name: str):
        """–ó–∞–ø–∏—Å—å –±—É—Ñ–µ—Ä–∞ –≤ PostgreSQL"""
        buffer = self.buffers[table_name]
        if not buffer:
            return
            
        try:
            async with self.pg_pool.acquire() as conn:
                if table_name == 'book_ticker':
                    await conn.executemany("""
                        INSERT INTO marketdata.book_ticker (
                            ts_exchange, ts_ingest, symbol_id, update_id,
                            best_bid, best_ask, bid_qty, ask_qty, spread, mid
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
                    """, buffer)
                    
                elif table_name == 'trades':
                    await conn.executemany("""
                        INSERT INTO marketdata.trades (
                            ts_exchange, ts_ingest, symbol_id, agg_trade_id,
                            price, qty, is_buyer_maker
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7)
                        ON CONFLICT DO NOTHING
                    """, buffer)
                    
                elif table_name == 'depth_events':
                    await conn.executemany("""
                        INSERT INTO marketdata.depth_events (
                            ts_exchange, ts_ingest, symbol_id,
                            first_update_id, final_update_id, prev_final_update_id,
                            bids, asks
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                        ON CONFLICT DO NOTHING
                    """, buffer)
                elif table_name == 'mark_price':
                    await conn.executemany("""
                        INSERT INTO marketdata.mark_price (
                            ts_exchange, ts_ingest, symbol_id, event_type,
                            mark_price, index_price, est_settlement_price,
                            funding_rate, next_funding_time
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                        ON CONFLICT DO NOTHING
                    """, buffer)
                elif table_name == 'force_orders':
                    await conn.executemany("""
                        INSERT INTO marketdata.force_orders (
                            ts_exchange, ts_ingest, symbol_id, side, price, qty, raw
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7)
                        ON CONFLICT DO NOTHING
                    """, buffer)
            
            logger.debug(f"‚úÖ Flush {table_name}: {len(buffer)} –∑–∞–ø–∏—Å–µ–π")
            self.stats[table_name]['processed'] += len(buffer)
            self.buffers[table_name].clear()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ flush {table_name}: {e}")
            self.stats[table_name]['failed'] += len(buffer)
            self.buffers[table_name].clear()
    
    async def flush_all(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π flush –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–æ–≤"""
        for table_name in self.buffers:
            await self._flush_buffer(table_name)
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return dict(self.stats)

class WebSocketStream:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–∏–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"""
    
    def __init__(self, stream_url: str, symbols: List[str], 
                 symbol_manager: SymbolManager, batch_processor: BatchProcessor):
        self.stream_url = stream_url
        self.symbols = symbols
        self.symbol_manager = symbol_manager
        self.batch_processor = batch_processor
        self.websocket = None
        self.running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket –ø–æ—Ç–æ–∫–∞"""
        self.running = True
        
        while self.running:
            try:
                logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {len(self.symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                async with websockets.connect(self.stream_url) as websocket:
                    self.websocket = websocket
                    
                    async for message in websocket:
                        if not self.running:
                            break
                            
                        await self._process_message(message)
                        
            except Exception as e:
                logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
                if self.running:
                    logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(5)
    
    async def _process_message(self, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            data = json.loads(message)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if 'stream' not in data or 'data' not in data:
                return
            
            stream_name = data['stream']
            event_data = data['data']
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–º–≤–æ–ª–∞ –∏–∑ stream name
            if '@bookTicker' in stream_name:
                symbol = stream_name.replace('@bookTicker', '').upper()
                event = await self._parse_book_ticker(symbol, event_data)
            elif '@aggTrade' in stream_name:
                symbol = stream_name.replace('@aggTrade', '').upper()
                event = await self._parse_agg_trade(symbol, event_data)
            elif '@depth' in stream_name:
                symbol = stream_name.split('@')[0].upper()
                event = await self._parse_depth(symbol, event_data)
            elif '@markPrice' in stream_name:
                # –º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∫ per-symbol –ø–æ—Ç–æ–∫
                symbol = (event_data.get('s') or stream_name.split('@')[0]).upper()
                event = await self._parse_mark_price(symbol, event_data)
            elif '@forceOrder' in stream_name:
                # forceOrder —Å–æ–¥–µ—Ä–∂–∏—Ç order –≤ –ø–æ–ª–µ 'o'
                o = event_data.get('o', {})
                symbol = (o.get('s') or event_data.get('s') or stream_name.split('@')[0]).upper()
                event = await self._parse_force_order(symbol, event_data)
            else:
                return
            
            if event and symbol in self.symbol_manager.symbols:
                symbol_id = self.symbol_manager.symbols[symbol]
                await self.batch_processor.add_event(event, symbol_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _parse_book_ticker(self, symbol: str, data: Dict) -> Optional[BookTickerEvent]:
        """–ü–∞—Ä—Å–∏–Ω–≥ bookTicker —Å–æ–±—ã—Ç–∏—è"""
        try:
            return BookTickerEvent(
                symbol=symbol,
                exchange='binance-futures',
                ts_exchange=datetime.fromtimestamp(data['E'] / 1000, tz=timezone.utc),
                ts_ingest=datetime.now(tz=timezone.utc),
                event_type='bookTicker',
                update_id=data.get('u'),
                best_bid=float(data['b']),
                best_ask=float(data['a']),
                bid_qty=float(data['B']),
                ask_qty=float(data['A'])
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ bookTicker {symbol}: {e}")
            return None
    
    async def _parse_agg_trade(self, symbol: str, data: Dict) -> Optional[TradeEvent]:
        """–ü–∞—Ä—Å–∏–Ω–≥ aggTrade —Å–æ–±—ã—Ç–∏—è"""
        try:
            return TradeEvent(
                symbol=symbol,
                exchange='binance-futures',
                ts_exchange=datetime.fromtimestamp(data['E'] / 1000, tz=timezone.utc),
                ts_ingest=datetime.now(tz=timezone.utc),
                event_type='aggTrade',
                agg_trade_id=data['a'],
                price=float(data['p']),
                qty=float(data['q']),
                is_buyer_maker=data['m']
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ aggTrade {symbol}: {e}")
            return None
    
    async def _parse_depth(self, symbol: str, data: Dict) -> Optional[DepthEvent]:
        """–ü–∞—Ä—Å–∏–Ω–≥ depth —Å–æ–±—ã—Ç–∏—è"""
        try:
            return DepthEvent(
                symbol=symbol,
                exchange='binance-futures',
                ts_exchange=datetime.fromtimestamp(data['E'] / 1000, tz=timezone.utc),
                ts_ingest=datetime.now(tz=timezone.utc),
                event_type='depthUpdate',
                first_update_id=data['U'],
                final_update_id=data['u'],
                prev_final_update_id=data.get('pu'),
                bids=data['b'],
                asks=data['a']
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ depth {symbol}: {e}")
            return None

    async def _parse_mark_price(self, symbol: str, data: Dict) -> Optional[MarkPriceEvent]:
        """–ü–∞—Ä—Å–∏–Ω–≥ markPrice@1s —Å–æ–±—ã—Ç–∏—è"""
        try:
            ts_ex = datetime.fromtimestamp((data.get('E') or 0) / 1000, tz=timezone.utc)
            return MarkPriceEvent(
                symbol=symbol,
                exchange='binance-futures',
                ts_exchange=ts_ex,
                ts_ingest=datetime.now(tz=timezone.utc),
                event_type=data.get('e'),
                mark_price=float(data['p']) if data.get('p') is not None else None,
                index_price=float(data['i']) if data.get('i') is not None else None,
                est_settlement_price=float(data['P']) if data.get('P') is not None else None,
                funding_rate=float(data['r']) if data.get('r') is not None else None,
                next_funding_time=(datetime.fromtimestamp(data['T']/1000, tz=timezone.utc) if data.get('T') else None)
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ markPrice {symbol}: {e}")
            return None

    async def _parse_force_order(self, symbol: str, data: Dict) -> Optional[ForceOrderEvent]:
        """–ü–∞—Ä—Å–∏–Ω–≥ forceOrder —Å–æ–±—ã—Ç–∏—è (–ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏)"""
        try:
            o = data.get('o', {})
            ts_ms = data.get('E') or o.get('T') or 0
            return ForceOrderEvent(
                symbol=symbol,
                exchange='binance-futures',
                ts_exchange=datetime.fromtimestamp(ts_ms/1000, tz=timezone.utc),
                ts_ingest=datetime.now(tz=timezone.utc),
                event_type='forceOrder',
                side=o.get('S'),
                price=(float(o['p']) if o.get('p') is not None else None),
                qty=(float(o['q']) if o.get('q') is not None else None),
                raw=data
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ forceOrder {symbol}: {e}")
            return None
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –ø–æ—Ç–æ–∫–∞"""
        self.running = False
        if self.websocket:
            await self.websocket.close()

class MultiStreamCollector:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è multi-stream —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, pg_connection_string: str, batch_size: int = 100):
        self.pg_connection_string = pg_connection_string
        self.batch_size = batch_size
        self.pg_pool: Optional[asyncpg.Pool] = None
        self.symbol_manager: Optional[SymbolManager] = None
        self.batch_processor: Optional[BatchProcessor] = None
        self.streams: List[WebSocketStream] = []
        self.running = False
        self.stats_task: Optional[asyncio.Task] = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Multi-Stream Collector")
        
        # PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        self.pg_pool = await asyncpg.create_pool(
            self.pg_connection_string,
            min_size=5,
            max_size=20,
            command_timeout=30
        )
        logger.info("‚úÖ PostgreSQL pool —Å–æ–∑–¥–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.symbol_manager = SymbolManager(self.pg_pool)
        await self.symbol_manager.load_symbols()
        
        self.batch_processor = BatchProcessor(self.pg_pool, self.batch_size)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ WebSocket –ø–æ—Ç–æ–∫–æ–≤
        await self._create_streams()
        
    async def _create_streams(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ WebSocket –ø–æ—Ç–æ–∫–æ–≤ —Å —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        all_symbols = list(self.symbol_manager.symbols.keys())
        top_symbols = list(self.symbol_manager.top_symbols)
        
        # –®–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –ø–æ—Ç–æ–∫–∞–º
        chunk_size = 50  # –°–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –ø–æ—Ç–æ–∫
        symbol_chunks = [all_symbols[i:i + chunk_size] 
                        for i in range(0, len(all_symbols), chunk_size)]
        
        base_url = "wss://fstream.binance.com/stream?streams="
        
        # bookTicker –ø–æ—Ç–æ–∫–∏
        for i, symbols in enumerate(symbol_chunks):
            streams = [f"{s.lower()}@bookTicker" for s in symbols]
            url = base_url + "/".join(streams)
            
            stream = WebSocketStream(
                url, symbols, self.symbol_manager, self.batch_processor
            )
            self.streams.append(stream)
            logger.info(f"üì° bookTicker –ø–æ—Ç–æ–∫ {i+1}: {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # aggTrade –ø–æ—Ç–æ–∫–∏  
        for i, symbols in enumerate(symbol_chunks):
            streams = [f"{s.lower()}@aggTrade" for s in symbols]
            url = base_url + "/".join(streams)
            
            stream = WebSocketStream(
                url, symbols, self.symbol_manager, self.batch_processor
            )
            self.streams.append(stream)
            logger.info(f"üìà aggTrade –ø–æ—Ç–æ–∫ {i+1}: {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # depth –ø–æ—Ç–æ–∫ –¥–ª—è —Ç–æ–ø-—Å–∏–º–≤–æ–ª–æ–≤ (diff depth @100ms)
        if top_symbols:
            depth_streams = [f"{s.lower()}@depth@100ms" for s in top_symbols]
            url = base_url + "/".join(depth_streams)
            stream = WebSocketStream(url, top_symbols, self.symbol_manager, self.batch_processor)
            self.streams.append(stream)
            logger.info(f"üßä depth –ø–æ—Ç–æ–∫ (@100ms): {len(top_symbols)} —Ç–æ–ø-—Å–∏–º–≤–æ–ª–æ–≤")

        # markPrice@1s –ø–æ—Ç–æ–∫–∏ (–≤–∫–ª—é—á–∞–µ–º –ø–æ —Ñ–ª–∞–≥—É –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        enable_mark = (os.environ.get('ENABLE_MARK_PRICE', 'true').lower() == 'true')
        if enable_mark:
            for i, symbols in enumerate(symbol_chunks):
                streams = [f"{s.lower()}@markPrice@1s" for s in symbols]
                url = base_url + "/".join(streams)
                stream = WebSocketStream(url, symbols, self.symbol_manager, self.batch_processor)
                self.streams.append(stream)
                logger.info(f"üè∑Ô∏è markPrice –ø–æ—Ç–æ–∫ {i+1}: {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")

        # forceOrder –ø–æ—Ç–æ–∫–∏ (–≤–∫–ª—é—á–∞–µ–º –ø–æ —Ñ–ª–∞–≥—É –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        enable_force = (os.environ.get('ENABLE_FORCE_ORDER', 'true').lower() == 'true')
        if enable_force:
            for i, symbols in enumerate(symbol_chunks):
                streams = [f"{s.lower()}@forceOrder" for s in symbols]
                url = base_url + "/".join(streams)
                stream = WebSocketStream(url, symbols, self.symbol_manager, self.batch_processor)
                self.streams.append(stream)
                logger.info(f"‚ö†Ô∏è forceOrder –ø–æ—Ç–æ–∫ {i+1}: {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–æ {len(self.streams)} WebSocket –ø–æ—Ç–æ–∫–æ–≤")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
        logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Multi-Stream Collector")
        self.running = True
        
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        tasks = []
        for i, stream in enumerate(self.streams):
            task = asyncio.create_task(stream.start())
            tasks.append(task)
            logger.info(f"üî¥ –ü–æ—Ç–æ–∫ {i+1} –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_task = asyncio.create_task(self._stats_loop())
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await asyncio.gather(*tasks, self.stats_task)
        except asyncio.CancelledError:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await self.stop()
    
    async def _stats_loop(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.running:
            try:
                await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                stats = self.batch_processor.get_stats()
                
                logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ë–û–†–ê –î–ê–ù–ù–´–•:")
                for table, table_stats in stats.items():
                    processed = table_stats['processed']
                    failed = table_stats['failed']
                    logger.info(f"  {table}: {processed} ‚úÖ / {failed} ‚ùå")
                
                # Flush –±—É—Ñ–µ—Ä–æ–≤
                await self.batch_processor.flush_all()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ stats_loop: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Multi-Stream Collector")
        self.running = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
        for stream in self.streams:
            await stream.stop()
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if self.stats_task:
            self.stats_task.cancel()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π flush
        if self.batch_processor:
            await self.batch_processor.flush_all()
            final_stats = self.batch_processor.get_stats()
            logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {final_stats}")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞
        if self.pg_pool:
            await self.pg_pool.close()
        
        logger.info("‚úÖ Multi-Stream Collector –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def setup_signal_handlers(collector: MultiStreamCollector):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    def signal_handler(signum, frame):
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        asyncio.create_task(collector.stop())
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    Path("logs").mkdir(exist_ok=True)
    
    # PostgreSQL connection string –¥–ª—è Digital Ocean
    pg_connection_string = os.getenv(
        "DATABASE_URL",
        "postgresql://user:password@host:port/database?sslmode=require"
    )
    
    collector = MultiStreamCollector(
        pg_connection_string=pg_connection_string,
        batch_size=100
    )
    
    setup_signal_handlers(collector)
    
    try:
        await collector.initialize()
        await collector.start()
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await collector.stop()

if __name__ == "__main__":
    asyncio.run(main())