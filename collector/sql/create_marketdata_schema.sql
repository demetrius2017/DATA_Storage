-- ===============================================
-- üóÑÔ∏è MARKET DATA SCHEMA DDL for PostgreSQL/TimescaleDB
-- ===============================================
-- 
-- –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö market data
-- –ø–æ 200 —Ç–æ—Ä–≥–æ–≤—ã–º –ø–∞—Ä–∞–º —Å Binance
--
-- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
-- - PostgreSQL 13+
-- - TimescaleDB extension (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
-- - –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è 30+ –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö
-- ===============================================

-- –í–∫–ª—é—á–µ–Ω–∏–µ TimescaleDB (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
CREATE EXTENSION IF NOT EXISTS timescaledb;

-- –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã
CREATE SCHEMA IF NOT EXISTS marketdata;

-- ===============================================
-- 1. –°–ü–†–ê–í–û–ß–ù–ò–ö –°–ò–ú–í–û–õ–û–í
-- ===============================================

CREATE TABLE marketdata.symbols (
    id bigserial PRIMARY KEY,
    exchange text NOT NULL,              -- 'binance-futures', 'binance-spot'
    symbol text NOT NULL,                -- 'BTCUSDT', 'ETHUSDT', 'SOLUSDT'
    instrument_type text,                -- 'perp', 'spot', 'option'
    base_asset text,                     -- 'BTC', 'ETH', 'SOL'
    quote_asset text,                    -- 'USDT', 'BUSD', 'BTC'
    is_active boolean DEFAULT true,
    tick_size double precision,          -- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Ü–µ–Ω—ã
    lot_size double precision,           -- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    UNIQUE (exchange, symbol)
);

COMMENT ON TABLE marketdata.symbols IS '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤';
COMMENT ON COLUMN marketdata.symbols.exchange IS '–ë–∏—Ä–∂–∞: binance-futures, binance-spot';
COMMENT ON COLUMN marketdata.symbols.symbol IS '–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: BTCUSDT, ETHUSDT';
COMMENT ON COLUMN marketdata.symbols.instrument_type IS '–¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: perp, spot';

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è symbols
CREATE INDEX idx_symbols_exchange ON marketdata.symbols (exchange);
CREATE INDEX idx_symbols_active ON marketdata.symbols (is_active) WHERE is_active = true;

-- ===============================================
-- 2. BOOK TICKER (TOP-OF-BOOK DATA)
-- ===============================================

CREATE TABLE marketdata.book_ticker (
    ts_exchange timestamptz NOT NULL,    -- –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–∏—Ä–∂–µ (UTC)
    ts_ingest timestamptz NOT NULL DEFAULT now(),  -- –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    symbol_id bigint NOT NULL REFERENCES marketdata.symbols(id),
    update_id bigint,                    -- Update ID –æ—Ç –±–∏—Ä–∂–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    best_bid double precision NOT NULL,  -- –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
    best_ask double precision NOT NULL,  -- –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
    bid_qty double precision NOT NULL,   -- –û–±—ä—ë–º –Ω–∞ –ª—É—á—à–µ–π –ø–æ–∫—É–ø–∫–µ
    ask_qty double precision NOT NULL,   -- –û–±—ä—ë–º –Ω–∞ –ª—É—á—à–µ–π –ø—Ä–æ–¥–∞–∂–µ
    spread double precision NOT NULL,    -- –°–ø—Ä–µ–¥: ask - bid
    mid double precision NOT NULL,       -- –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: (ask + bid) / 2
    spread_bps double precision GENERATED ALWAYS AS (
        CASE WHEN mid > 0 THEN (spread / mid) * 10000 ELSE NULL END
    ) STORED,                           -- –°–ø—Ä–µ–¥ –≤ –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö
    
    -- –°–æ—Å—Ç–∞–≤–Ω–æ–π –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    PRIMARY KEY (symbol_id, ts_exchange, COALESCE(update_id, 0))
);

COMMENT ON TABLE marketdata.book_ticker IS '–ü–æ—Ç–æ–∫ top-of-book –¥–∞–Ω–Ω—ã—Ö (–ª—É—á—à–∏–µ bid/ask)';
COMMENT ON COLUMN marketdata.book_ticker.ts_exchange IS '–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–∏—Ä–∂–µ (UTC –∏–∑ E/1000)';
COMMENT ON COLUMN marketdata.book_ticker.spread_bps IS '–°–ø—Ä–µ–¥ –≤ –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç)';

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è book_ticker
CREATE INDEX idx_book_ticker_time ON marketdata.book_ticker (symbol_id, ts_exchange);
CREATE INDEX idx_book_ticker_ingest ON marketdata.book_ticker (ts_ingest);

-- ===============================================
-- 3. –ê–ì–†–ï–ì–ò–†–û–í–ê–ù–ù–´–ï –°–î–ï–õ–ö–ò
-- ===============================================

CREATE TABLE marketdata.trades (
    ts_exchange timestamptz NOT NULL,    -- –í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ –Ω–∞ –±–∏—Ä–∂–µ
    ts_ingest timestamptz NOT NULL DEFAULT now(),
    symbol_id bigint NOT NULL REFERENCES marketdata.symbols(id),
    agg_trade_id bigint NOT NULL,        -- ID –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
    price double precision NOT NULL,     -- –¶–µ–Ω–∞ —Å–¥–µ–ª–∫–∏
    qty double precision NOT NULL,       -- –û–±—ä—ë–º —Å–¥–µ–ª–∫–∏
    is_buyer_maker boolean NOT NULL,     -- true = –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –±—ã–ª maker
    trade_value double precision GENERATED ALWAYS AS (price * qty) STORED,
    
    PRIMARY KEY (symbol_id, agg_trade_id)
);

COMMENT ON TABLE marketdata.trades IS '–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Å –±–∏—Ä–∂–∏';
COMMENT ON COLUMN marketdata.trades.is_buyer_maker IS 'true = –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –±—ã–ª maker (–ø–∞—Å—Å–∏–≤–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)';
COMMENT ON COLUMN marketdata.trades.trade_value IS '–û–±—ä—ë–º —Å–¥–µ–ª–∫–∏ –≤ quote –≤–∞–ª—é—Ç–µ (price * qty)';

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è trades
CREATE INDEX idx_trades_time ON marketdata.trades (symbol_id, ts_exchange);
CREATE INDEX idx_trades_side ON marketdata.trades (symbol_id, is_buyer_maker, ts_exchange);

-- ===============================================
-- 3.1. MARK PRICE (1s updates)
-- ===============================================

CREATE TABLE IF NOT EXISTS marketdata.mark_price (
    ts_exchange timestamptz NOT NULL,
    ts_ingest timestamptz NOT NULL DEFAULT now(),
    symbol_id bigint NOT NULL REFERENCES marketdata.symbols(id),
    event_type text,                      -- 'markPriceUpdate'
    mark_price double precision,          -- p
    index_price double precision,         -- i
    est_settlement_price double precision,-- P (–µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
    funding_rate double precision,        -- r (–µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
    next_funding_time timestamptz,        -- T (–º—Å ‚Üí timestamptz)

    PRIMARY KEY (symbol_id, ts_exchange)
);

COMMENT ON TABLE marketdata.mark_price IS 'Mark price / index price updates (@markPrice@1s)';

CREATE INDEX IF NOT EXISTS idx_mark_price_time ON marketdata.mark_price (symbol_id, ts_exchange);

-- ===============================================
-- 3.2. FORCE ORDERS (Liquidations)
-- ===============================================

CREATE TABLE IF NOT EXISTS marketdata.force_orders (
    ts_exchange timestamptz NOT NULL,
    ts_ingest timestamptz NOT NULL DEFAULT now(),
    symbol_id bigint NOT NULL REFERENCES marketdata.symbols(id),
    side text,                            -- 'BUY' / 'SELL' (S)
    price double precision,               -- p
    qty double precision,                 -- q
    raw jsonb NOT NULL,                   -- –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è ('o')

    -- –í —Å–∏–ª—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä–æ–≥–æ–≥–æ ID –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª—é—á –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    PRIMARY KEY (symbol_id, ts_exchange, side, price, qty)
);

COMMENT ON TABLE marketdata.force_orders IS 'Liquidation orders stream (@forceOrder)';

CREATE INDEX IF NOT EXISTS idx_force_orders_time ON marketdata.force_orders (symbol_id, ts_exchange);

-- ===============================================
-- 4. –°–û–ë–´–¢–ò–Ø –ì–õ–£–ë–ò–ù–´ –†–´–ù–ö–ê (RAW)
-- ===============================================

CREATE TABLE marketdata.depth_events (
    ts_exchange timestamptz NOT NULL,
    ts_ingest timestamptz NOT NULL DEFAULT now(),
    symbol_id bigint NOT NULL REFERENCES marketdata.symbols(id),
    first_update_id bigint NOT NULL,     -- –ü–µ—Ä–≤—ã–π update ID –≤ —Å–æ–±—ã—Ç–∏–∏
    final_update_id bigint NOT NULL,     -- –ü–æ—Å–ª–µ–¥–Ω–∏–π update ID –≤ —Å–æ–±—ã—Ç–∏–∏  
    prev_final_update_id bigint,         -- –ü—Ä–µ–¥—ã–¥—É—â–∏–π final update ID
    bids jsonb NOT NULL,                 -- –ú–∞—Å—Å–∏–≤ [[price, qty], ...] –¥–ª—è bid
    asks jsonb NOT NULL,                 -- –ú–∞—Å—Å–∏–≤ [[price, qty], ...] –¥–ª—è ask
    bids_count int GENERATED ALWAYS AS (jsonb_array_length(bids)) STORED,
    asks_count int GENERATED ALWAYS AS (jsonb_array_length(asks)) STORED,
    
    -- –í–∞–∂–Ω–æ: –¥–ª—è Timescale —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –Ω–∞ –≥–∏–ø–µ—Ä—Ç–∞–±–ª–∏—Ü–∞—Ö –¥–æ–ª–∂–Ω—ã –≤–∫–ª—é—á–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (ts_exchange)
    PRIMARY KEY (symbol_id, ts_exchange, final_update_id)
);

COMMENT ON TABLE marketdata.depth_events IS 'Raw —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–ª—É–±–∏–Ω—ã —Ä—ã–Ω–∫–∞';
COMMENT ON COLUMN marketdata.depth_events.bids IS '–ú–∞—Å—Å–∏–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π bid [[price, qty], ...]';
COMMENT ON COLUMN marketdata.depth_events.asks IS '–ú–∞—Å—Å–∏–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π ask [[price, qty], ...]';

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è depth_events
CREATE INDEX idx_depth_events_time ON marketdata.depth_events (symbol_id, ts_exchange);
CREATE INDEX idx_depth_events_update_id ON marketdata.depth_events (symbol_id, final_update_id);
-- –î—É–±–ª–∏—Ä—É—é—â–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è ON CONFLICT, –µ—Å–ª–∏ PK —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
-- CREATE UNIQUE INDEX IF NOT EXISTS uq_depth_events_symbol_time_final ON marketdata.depth_events (symbol_id, ts_exchange, final_update_id);

-- ===============================================
-- 5. ORDERBOOK TOP-N (PROCESSED FEATURES)
-- ===============================================

CREATE TABLE marketdata.orderbook_topN (
    ts_exchange timestamptz NOT NULL,
    symbol_id bigint NOT NULL REFERENCES marketdata.symbols(id),
    
    -- Top 5 levels bid side
    b1_price double precision, b1_qty double precision,
    b2_price double precision, b2_qty double precision,
    b3_price double precision, b3_qty double precision,
    b4_price double precision, b4_qty double precision,
    b5_price double precision, b5_qty double precision,
    
    -- Top 5 levels ask side  
    a1_price double precision, a1_qty double precision,
    a2_price double precision, a2_qty double precision,
    a3_price double precision, a3_qty double precision,
    a4_price double precision, a4_qty double precision,
    a5_price double precision, a5_qty double precision,
    
    -- Derived microstructure features
    microprice double precision,         -- –ú–∏–∫—Ä–æ—Ü–µ–Ω–∞ Lee-Ready
    i1 double precision,                 -- Immediate impact level 1
    i5 double precision,                 -- Immediate impact level 5  
    wall_size_bid double precision,      -- –†–∞–∑–º–µ—Ä —Å—Ç–µ–Ω—ã –Ω–∞ bid —Å—Ç–æ—Ä–æ–Ω–µ
    wall_size_ask double precision,      -- –†–∞–∑–º–µ—Ä —Å—Ç–µ–Ω—ã –Ω–∞ ask —Å—Ç–æ—Ä–æ–Ω–µ
    wall_dist_bid_bps double precision,  -- –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–µ–Ω—ã bid (bps)
    wall_dist_ask_bps double precision,  -- –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–µ–Ω—ã ask (bps)
    ofi_1s double precision,             -- Order Flow Imbalance 1s
    total_bid_qty double precision GENERATED ALWAYS AS (
        COALESCE(b1_qty,0) + COALESCE(b2_qty,0) + COALESCE(b3_qty,0) + 
        COALESCE(b4_qty,0) + COALESCE(b5_qty,0)
    ) STORED,
    total_ask_qty double precision GENERATED ALWAYS AS (
        COALESCE(a1_qty,0) + COALESCE(a2_qty,0) + COALESCE(a3_qty,0) + 
        COALESCE(a4_qty,0) + COALESCE(a5_qty,0)
    ) STORED,
    
    PRIMARY KEY (symbol_id, ts_exchange)
);

COMMENT ON TABLE marketdata.orderbook_topN IS '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–æ–ø-N —É—Ä–æ–≤–Ω–µ–π orderbook —Å —Ñ–∏—á–∞–º–∏';
COMMENT ON COLUMN marketdata.orderbook_topN.microprice IS '–ú–∏–∫—Ä–æ—Ü–µ–Ω–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É Lee-Ready';
COMMENT ON COLUMN marketdata.orderbook_topN.i1 IS 'Immediate impact –¥–ª—è 1 —É—Ä–æ–≤–Ω—è';
COMMENT ON COLUMN marketdata.orderbook_topN.ofi_1s IS 'Order Flow Imbalance –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É';

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è orderbook_topN
CREATE INDEX idx_orderbook_topN_time ON marketdata.orderbook_topN (symbol_id, ts_exchange);

-- ===============================================
-- 6. –ê–ì–†–ï–ì–ê–¢–´ BOOK_TICKER (1 –°–ï–ö–£–ù–î–ê)
-- ===============================================

CREATE TABLE marketdata.bt_1s (
    ts_second timestamptz NOT NULL,      -- –û–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ —Å–µ–∫—É–Ω–¥—ã
    symbol_id bigint NOT NULL REFERENCES marketdata.symbols(id),
    
    -- OHLC –¥–ª—è mid price
    mid_open double precision,
    mid_high double precision,
    mid_low double precision,
    mid_close double precision,
    
    -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø—Ä–µ–¥–∞
    spread_mean double precision,
    spread_std double precision,
    spread_min double precision,
    spread_max double precision,
    
    -- –û–±—ä—ë–º—ã
    bid_qty_mean double precision,
    ask_qty_mean double precision,
    
    -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    updates_count int,
    
    -- Volume weighted mid
    volume_weighted_mid double precision,
    
    PRIMARY KEY (symbol_id, ts_second)
);

COMMENT ON TABLE marketdata.bt_1s IS '–ê–≥—Ä–µ–≥–∞—Ç—ã book_ticker –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–µ–∫—É–Ω–¥–∞–º';

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è bt_1s
CREATE INDEX idx_bt_1s_time ON marketdata.bt_1s (symbol_id, ts_second);

-- ===============================================
-- 7. –ê–ì–†–ï–ì–ê–¢–´ –°–î–ï–õ–û–ö (1 –°–ï–ö–£–ù–î–ê)  
-- ===============================================

CREATE TABLE marketdata.trade_1s (
    ts_second timestamptz NOT NULL,
    symbol_id bigint NOT NULL REFERENCES marketdata.symbols(id),
    
    -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –æ–±—ä—ë–º—ã
    trade_count int NOT NULL DEFAULT 0,
    volume_sum double precision NOT NULL DEFAULT 0,
    value_sum double precision NOT NULL DEFAULT 0,  -- –í quote –≤–∞–ª—é—Ç–µ
    
    -- VWAP
    vwap double precision,
    
    -- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º
    buy_volume double precision NOT NULL DEFAULT 0,   -- –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
    sell_volume double precision NOT NULL DEFAULT 0,  -- –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
    buy_count int NOT NULL DEFAULT 0,
    sell_count int NOT NULL DEFAULT 0,
    
    -- –î–∏—Å–±–∞–ª–∞–Ω—Å
    imbalance_ratio double precision GENERATED ALWAYS AS (
        CASE WHEN (buy_volume + sell_volume) > 0 
             THEN (buy_volume - sell_volume) / (buy_volume + sell_volume)
             ELSE 0 END
    ) STORED,
    
    -- –¶–µ–Ω–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    price_min double precision,
    price_max double precision,
    
    PRIMARY KEY (symbol_id, ts_second)
);

COMMENT ON TABLE marketdata.trade_1s IS '–ê–≥—Ä–µ–≥–∞—Ç—ã —Å–¥–µ–ª–æ–∫ –ø–æ —Å–µ–∫—É–Ω–¥–∞–º';
COMMENT ON COLUMN marketdata.trade_1s.imbalance_ratio IS '–î–∏—Å–±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂: (buy-sell)/(buy+sell)';

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è trade_1s
CREATE INDEX idx_trade_1s_time ON marketdata.trade_1s (symbol_id, ts_second);

-- ===============================================
-- 8. –°–õ–£–ñ–ï–ë–ù–´–ï –¢–ê–ë–õ–ò–¶–´
-- ===============================================

-- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ offsets –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
CREATE TABLE marketdata.ingestion_offsets (
    symbol_id bigint NOT NULL REFERENCES marketdata.symbols(id),
    stream_type text NOT NULL,           -- 'bookTicker', 'aggTrade', 'depth'
    last_update_id bigint,
    last_event_time timestamptz,
    last_processed_at timestamptz DEFAULT now(),
    
    PRIMARY KEY (symbol_id, stream_type)
);

COMMENT ON TABLE marketdata.ingestion_offsets IS '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è recovery';

-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ingestion
CREATE TABLE marketdata.ingestion_stats (
    date_hour timestamptz NOT NULL,      -- –û–∫—Ä—É–≥–ª–µ–Ω–æ –¥–æ —á–∞—Å–∞
    symbol_id bigint NOT NULL REFERENCES marketdata.symbols(id),
    stream_type text NOT NULL,
    events_processed bigint DEFAULT 0,
    events_failed bigint DEFAULT 0,
    last_latency_ms double precision,    -- –ó–∞–¥–µ—Ä–∂–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    PRIMARY KEY (date_hour, symbol_id, stream_type)
);

COMMENT ON TABLE marketdata.ingestion_stats IS '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ —á–∞—Å–∞–º';

-- ===============================================
-- 9. TIMESCALEDB HYPERTABLES (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
-- ===============================================

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å TimescaleDB –∏ —Å–æ–∑–¥–∞—ë–º hypertables
DO $$
BEGIN
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TimescaleDB
    IF EXISTS (SELECT 1 FROM pg_extension WHERE extname = 'timescaledb') THEN
        
        -- –°–æ–∑–¥–∞—ë–º hypertables —Å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ symbol_id
        PERFORM create_hypertable('marketdata.book_ticker', 'ts_exchange',
            partitioning_column => 'symbol_id', 
            number_partitions => 16,
            if_not_exists => TRUE);
            
        PERFORM create_hypertable('marketdata.trades', 'ts_exchange',
            partitioning_column => 'symbol_id',
            number_partitions => 16, 
            if_not_exists => TRUE);

        PERFORM create_hypertable('marketdata.mark_price', 'ts_exchange',
            partitioning_column => 'symbol_id',
            number_partitions => 8,
            if_not_exists => TRUE);
            
        PERFORM create_hypertable('marketdata.depth_events', 'ts_exchange',
            partitioning_column => 'symbol_id',
            number_partitions => 8,  -- –ú–µ–Ω—å—à–µ –ø–∞—Ä—Ç–∏—Ü–∏–π –¥–ª—è depth (–±–æ–ª–µ–µ –æ–±—ä—ë–º–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞)
            if_not_exists => TRUE);

        PERFORM create_hypertable('marketdata.force_orders', 'ts_exchange',
            partitioning_column => 'symbol_id',
            number_partitions => 8,
            if_not_exists => TRUE);
            
        PERFORM create_hypertable('marketdata.orderbook_topN', 'ts_exchange',
            partitioning_column => 'symbol_id',
            number_partitions => 16,
            if_not_exists => TRUE);
            
        PERFORM create_hypertable('marketdata.bt_1s', 'ts_second',
            partitioning_column => 'symbol_id',
            number_partitions => 8,
            if_not_exists => TRUE);
            
        PERFORM create_hypertable('marketdata.trade_1s', 'ts_second', 
            partitioning_column => 'symbol_id',
            number_partitions => 8,
            if_not_exists => TRUE);
            
        RAISE NOTICE 'TimescaleDB hypertables —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ';
        
    ELSE
        RAISE NOTICE 'TimescaleDB –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–±—ã—á–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã PostgreSQL';
    END IF;
END
$$;

-- ===============================================
-- 10. –ü–û–õ–ò–¢–ò–ö–ò RETENTION –ò COMPRESSION
-- ===============================================

-- Retention policies (–µ—Å–ª–∏ TimescaleDB –¥–æ—Å—Ç—É–ø–µ–Ω)
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_extension WHERE extname = 'timescaledb') THEN
        
        -- Retention: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        PERFORM add_retention_policy('marketdata.book_ticker', INTERVAL '30 days', if_not_exists => TRUE);
        PERFORM add_retention_policy('marketdata.trades', INTERVAL '30 days', if_not_exists => TRUE);
    PERFORM add_retention_policy('marketdata.mark_price', INTERVAL '30 days', if_not_exists => TRUE);
        PERFORM add_retention_policy('marketdata.depth_events', INTERVAL '7 days', if_not_exists => TRUE);
    PERFORM add_retention_policy('marketdata.force_orders', INTERVAL '30 days', if_not_exists => TRUE);
        PERFORM add_retention_policy('marketdata.orderbook_topN', INTERVAL '30 days', if_not_exists => TRUE);
        PERFORM add_retention_policy('marketdata.bt_1s', INTERVAL '180 days', if_not_exists => TRUE);
        PERFORM add_retention_policy('marketdata.trade_1s', INTERVAL '180 days', if_not_exists => TRUE);
        
        -- Compression: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø–∞—Ä—Ç–∏—Ü–∏–π
        PERFORM add_compression_policy('marketdata.book_ticker', INTERVAL '7 days', if_not_exists => TRUE);
        PERFORM add_compression_policy('marketdata.trades', INTERVAL '7 days', if_not_exists => TRUE);
    PERFORM add_compression_policy('marketdata.mark_price', INTERVAL '7 days', if_not_exists => TRUE);
        PERFORM add_compression_policy('marketdata.depth_events', INTERVAL '1 day', if_not_exists => TRUE);
    PERFORM add_compression_policy('marketdata.force_orders', INTERVAL '7 days', if_not_exists => TRUE);
        PERFORM add_compression_policy('marketdata.orderbook_topN', INTERVAL '7 days', if_not_exists => TRUE);
        PERFORM add_compression_policy('marketdata.bt_1s', INTERVAL '30 days', if_not_exists => TRUE);
        PERFORM add_compression_policy('marketdata.trade_1s', INTERVAL '30 days', if_not_exists => TRUE);
        
        RAISE NOTICE 'TimescaleDB retention –∏ compression policies –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã';
        
    END IF;
END
$$;

-- ===============================================
-- 11. –ù–ê–ß–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
-- ===============================================

-- –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
INSERT INTO marketdata.symbols (exchange, symbol, instrument_type, base_asset, quote_asset) VALUES
('binance-futures', 'BTCUSDT', 'perp', 'BTC', 'USDT'),
('binance-futures', 'ETHUSDT', 'perp', 'ETH', 'USDT'),
('binance-futures', 'SOLUSDT', 'perp', 'SOL', 'USDT'),
('binance-futures', 'ADAUSDT', 'perp', 'ADA', 'USDT'),
('binance-futures', 'DOTUSDT', 'perp', 'DOT', 'USDT')
ON CONFLICT (exchange, symbol) DO NOTHING;

-- ===============================================
-- 12. –ü–û–õ–ï–ó–ù–´–ï VIEWS
-- ===============================================

-- View –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ "–≤—á–µ—Ä–∞—à–Ω–∏–º" –¥–∞–Ω–Ω—ã–º
CREATE OR REPLACE VIEW marketdata.yesterday_dataset AS
SELECT 
    bt.ts_second,
    s.symbol,
    bt.mid_open,
    bt.mid_high, 
    bt.mid_low,
    bt.mid_close,
    bt.spread_mean,
    tr.trade_count,
    tr.volume_sum,
    tr.vwap,
    tr.imbalance_ratio,
    -- –î–æ–±–∞–≤–ª—è–µ–º lag features
    LAG(bt.mid_close, 1) OVER (PARTITION BY bt.symbol_id ORDER BY bt.ts_second) AS prev_mid,
    LAG(tr.imbalance_ratio, 1) OVER (PARTITION BY bt.symbol_id ORDER BY bt.ts_second) AS prev_imbalance
FROM marketdata.bt_1s bt
LEFT JOIN marketdata.trade_1s tr USING (symbol_id, ts_second)
LEFT JOIN marketdata.symbols s ON bt.symbol_id = s.id
WHERE bt.ts_second >= date_trunc('day', now() - INTERVAL '1 day')
  AND bt.ts_second < date_trunc('day', now())
  AND s.is_active = true;

COMMENT ON VIEW marketdata.yesterday_dataset IS 'View –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∑–∞ –≤—á–µ—Ä–∞ –¥–ª—è ML';

-- View –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
CREATE OR REPLACE VIEW marketdata.ingestion_health AS
SELECT 
    s.symbol,
    ios.stream_type,
    ios.last_event_time,
    ios.last_processed_at,
    EXTRACT(EPOCH FROM (now() - ios.last_processed_at)) AS seconds_since_last,
    ist.events_processed,
    ist.events_failed,
    ist.last_latency_ms
FROM marketdata.ingestion_offsets ios
LEFT JOIN marketdata.symbols s ON ios.symbol_id = s.id
LEFT JOIN marketdata.ingestion_stats ist ON (
    ios.symbol_id = ist.symbol_id 
    AND ios.stream_type = ist.stream_type
    AND ist.date_hour = date_trunc('hour', now())
)
WHERE s.is_active = true
ORDER BY s.symbol, ios.stream_type;

COMMENT ON VIEW marketdata.ingestion_health IS '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è ingestion –ø—Ä–æ—Ü–µ—Å—Å–∞';

-- ===============================================
-- –ó–ê–í–ï–†–®–ï–ù–ò–ï
-- ===============================================

-- –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–≤–∞–∫—É—É–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
ALTER SYSTEM SET track_activities = on;
ALTER SYSTEM SET track_counts = on;
ALTER SYSTEM SET track_io_timing = on;

-- –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SELECT pg_reload_conf();

-- –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
DO $$
BEGIN
    RAISE NOTICE '‚úÖ Market Data Schema —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!';
    RAISE NOTICE '–°—Ö–µ–º–∞: marketdata';
    RAISE NOTICE '–¢–∞–±–ª–∏—Ü—ã: symbols, book_ticker, trades, depth_events, orderbook_topN, bt_1s, trade_1s';
    RAISE NOTICE 'Views: yesterday_dataset, ingestion_health';
    RAISE NOTICE 'TimescaleDB: %', CASE WHEN EXISTS(SELECT 1 FROM pg_extension WHERE extname='timescaledb') THEN '–í–∫–ª—é—á—ë–Ω' ELSE '–ù–µ –Ω–∞–π–¥–µ–Ω' END;
END
$$;