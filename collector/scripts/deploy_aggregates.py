#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É: "‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ aggregates: –ù–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è bt_1s/trade_1s —Ç–∞–±–ª–∏—Ü"
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from collector.aggregates.aggregate_manager import AggregateManager
    print("‚úÖ –ú–æ–¥—É–ª—å AggregateManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install asyncpg")
    sys.exit(1)

async def deploy_aggregates():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    
    print("üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ–≤")
    print("=" * 60)
    
    # Connection string (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ë–î)
    connection_string = os.getenv(
        'DATABASE_URL',
        "postgresql://user:password@host:port/database"
    )
    
    manager = AggregateManager(connection_string)
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        pool = await manager.create_pool()
        async with pool.acquire() as conn:
            result = await conn.fetchval("SELECT version()")
            print(f"‚úÖ PostgreSQL: {result[:50]}...")
        await pool.close()
        
        # 2. –°–æ–∑–¥–∞–µ–º continuous aggregates
        print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ continuous aggregates...")
        success = await manager.setup_continuous_aggregates()
        
        if not success:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ–≤")
            return False
            
        print("‚úÖ Continuous aggregates —Å–æ–∑–¥–∞–Ω—ã")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤...")
        status = await manager.get_aggregate_status()
        
        if 'error' in status:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status['error']}")
            return False
            
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤: {len(status.get('aggregates', []))}")
        print(f"üìã –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–æ–ª–∏—Ç–∏–∫: {len(status.get('policies', []))}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        for agg in status.get('aggregates', []):
            view_name = agg['view_name']
            materialized = agg['materialized_only']
            finalized = agg['finalized']
            count = status['stats'].get(view_name, 0)
            
            print(f"   üìà {view_name}:")
            print(f"      ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {count}")
            print(f"      ‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω: {materialized}")
            print(f"      ‚Ä¢ –§–∏–Ω–∞–ª–∏–∑–æ–≤–∞–Ω: {finalized}")
        
        # 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        print("\n4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤...")
        refresh_success = await manager.refresh_aggregates()
        
        if refresh_success:
            print("‚úÖ –ê–≥—Ä–µ–≥–∞—Ç—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        symbols_to_test = ['BTCUSDT', 'ETHUSDT', 'SOLUSDT']
        
        for symbol in symbols_to_test:
            sample = await manager.get_market_data_sample(symbol, 3)
            if sample:
                print(f"‚úÖ {symbol}: {len(sample)} –∑–∞–ø–∏—Å–µ–π –Ω–∞–π–¥–µ–Ω–æ")
                latest = sample[0]
                print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {latest['ts_bucket']}")
                print(f"   BID: {latest.get('bid_close')}, ASK: {latest.get('ask_close')}")
                print(f"   Volume: {latest.get('volume')}, Trades: {latest.get('trade_count')}")
            else:
                print(f"‚ö†Ô∏è {symbol}: –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        print("\n" + "=" * 60)
        print("üéâ –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ê–ì–†–ï–ì–ê–¢–û–í –†–ê–ó–í–ï–†–ù–£–¢–ê!")
        print("=" * 60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã
        print("\nüìã –ü–æ–ª–µ–∑–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
        print("   ‚Ä¢ –°—Ç–∞—Ç—É—Å –∞–≥—Ä–µ–≥–∞—Ç–æ–≤:")
        print("     SELECT view_name, materialized_only FROM timescaledb_information.continuous_aggregates;")
        print("   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:")
        print("     SELECT * FROM market_data_1s WHERE symbol = 'BTCUSDT' ORDER BY ts_bucket DESC LIMIT 5;")
        print("   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–º–æ–≤:")
        print("     SELECT symbol, sum(volume), count(*) FROM trade_1s_continuous WHERE ts_bucket > now() - interval '1 hour' GROUP BY symbol;")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def validate_aggregates():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ–≤"""
    
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ–≤")
    print("=" * 50)
    
    connection_string = os.getenv(
        'DATABASE_URL',
        "postgresql://user:password@host:port/database"
    )
    
    manager = AggregateManager(connection_string)
    
    try:
        status = await manager.get_aggregate_status()
        
        if 'error' in status:
            print(f"‚ùå –û—à–∏–±–∫–∞: {status['error']}")
            return False
            
        aggregates = status.get('aggregates', [])
        if not aggregates:
            print("‚ö†Ô∏è –ê–≥—Ä–µ–≥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ.")
            return False
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(aggregates)} –∞–≥—Ä–µ–≥–∞—Ç–æ–≤:")
        
        expected_aggregates = ['bt_1s_continuous', 'trade_1s_continuous', 'depth_1s_continuous']
        found_aggregates = [agg['view_name'] for agg in aggregates]
        
        for expected in expected_aggregates:
            if expected in found_aggregates:
                count = status['stats'].get(expected, 0)
                print(f"   ‚úÖ {expected}: {count} –∑–∞–ø–∏—Å–µ–π")
            else:
                print(f"   ‚ùå {expected}: –ù–ï –ù–ê–ô–î–ï–ù")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ market_data_1s
        try:
            sample = await manager.get_market_data_sample('BTCUSDT', 1)
            if sample:
                print("   ‚úÖ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ market_data_1s: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("   ‚ö†Ô∏è –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ market_data_1s: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"   ‚ùå –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ market_data_1s: –æ—à–∏–±–∫–∞ ({e})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if len(sys.argv) > 1 and sys.argv[1] == 'validate':
        # –†–µ–∂–∏–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        result = asyncio.run(validate_aggregates())
    else:
        # –†–µ–∂–∏–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        result = asyncio.run(deploy_aggregates())
    
    sys.exit(0 if result else 1)

if __name__ == "__main__":
    main()