"""
üéØ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–ú–í–û–õ–û–í –î–õ–Ø MASS MARKET DATA COLLECTION
=====================================================

–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ 200+ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance Futures
–†–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

# –¢–æ–ø-20 –ø–æ –æ–±—ä—ë–º—É (—Ç—Ä–µ–±—É—é—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏)
TOP_VOLUME_SYMBOLS = [
    'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'XRPUSDT',
    'DOGEUSDT', 'ADAUSDT', 'TRXUSDT', 'AVAXUSDT', 'LINKUSDT',
    'DOTUSDT', 'TONUSDT', 'MATICUSDT', 'LTCUSDT', 'NEARUSDT',
    'UNIUSDT', 'ATOMUSDT', 'XLMUSDT', 'FILUSDT', 'ETCUSDT'
]

# –°—Ç–∞–±–∏–ª—å–Ω—ã–µ altcoins (—Å—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º)
STABLE_ALTCOINS = [
    'BCHUSDT', 'VETUSDT', 'ICPUSDT', 'APTUSDT', 'ALGOUSDT',
    'SHIBUSDT', 'HBARUSDT', 'SANDUSDT', 'MANAUSDT', 'AAVEUSDT',
    'FTMUSDT', 'EOSUSDT', 'THETAUSDT', 'AXSUSDT', 'CHZUSDT',
    'FLOWUSDT', 'KLAYUSDT', 'EGLDUSDT', 'COMPUSDT', 'SNXUSDT',
    'MKRUSDT', 'ZILUSDT', 'CRVUSDT', 'YFIUSDT', 'BANDUSDT',
    'SRMUSDT', 'OCEANUSDT', 'KNCUSDT', 'BTCDOMUSDT', 'DEFIUSDT'
]

# DeFi —Ç–æ–∫–µ–Ω—ã
DEFI_SYMBOLS = [
    'SUSHIUSDT', 'CAKEUSDT', 'PANCAKEUSDT', '1INCHUSDT', 'LUNAUSDT',
    'ALPHAUSDT', 'BALUSDT', 'ZENUSDT', 'AUDIOUSDT', 'CTSIUSDT',
    'DUSKUSDT', 'STORJUSDT', 'BZRXUSDT', 'KMDUSDT', 'NMRUSDT',
    'RSRUSDT', 'TRBUSDT', 'TRUUSDT', 'DEXEUSDT', 'DFUSDT',
    'LITUSDT', 'MATHUSDT', 'BNXUSDT', 'RAMPUSDT', 'XVSUSDT',
    'ALPHAUSDT', 'FISUSDT', 'OXTUSDT', 'TLMUSDT', 'BETAUSDT'
]

# Gaming & NFT
GAMING_NFT_SYMBOLS = [
    'ENJUSDT', 'WAXPUSDT', 'SLPUSDT', 'GALAUSDT', 'CHRUSDT',
    'PUNDIXUSDT', 'ALICEUSDT', 'SUPERUSDT', 'ILBUSDT', 'YGGUSDT',
    'STARUSDT', 'DEGOUSDT', 'LPTUSDT', 'PSGUSDT', 'CITYUSDT',
    'ASRUSDT', 'ATONUSDT', 'OYUSDT', 'IBMUSDT', 'SUSUSUSDT',
    'ACMUSDT', 'JUVUSDT', 'BARUSDT', 'ATLETICOOFANUSDT', 'NOVUSDT',
    'MINAUSDT', 'RAYUSDT', 'FARMUSDT', 'PERPUSDT', 'FTTUSDT'
]

# Layer 1 & Infrastructure
LAYER1_SYMBOLS = [
    'ONEUSDT', 'ZILUSDT', 'IOTAUSDT', 'ONTUSDT', 'QTUMUSDT',
    'NULSUSDT', 'RVNUSDT', 'ZENUSDT', 'WAVESUSDT', 'KSMUSDT',
    'LDOUSDT', 'CFXUSDT', 'CKBUSDT', 'STPTUSDT', 'FXSUSDT',
    'DARUSDT', 'RADUSDT', 'VIDTUSDT', 'FIDAUSDT', 'FTXTT',
    'AGLDUSDT', 'RADUSDT', 'BADGERUSDT', 'FISUSDT', 'TORNUSDT',
    'ACHUSDT', 'CELOUSDT', 'REEFUSDT', 'KLAYUSDT', 'ANKRUSDT'
]

# Meme & Community
MEME_SYMBOLS = [
    'PEPEUSDT', 'FLOKIUSDT', 'BONKUSDT', 'BOMEUSDT', 'WIFUSDT',
    'MEMEUSDT', 'DOGSUSDT', 'NOTUSDT', '1000SATSUSDT', 'ORDIUSDT',
    'RATSUSDT', 'MYUSDT', 'PEOPLEUSDT', 'SPELLUSDT', 'JASMYUSDT',
    'HOOKUSDT', 'MAGICUSDT', 'HIGHUSDT', 'ASRUSDT', 'PHBUSDT',
    'GASUSDT', 'GLMRUSDT', 'LQTYUSDT', 'IDUSDT', 'ARBUSDT',
    'OPUSDT', 'MAVUSDT', 'PENDLEUSDT', 'ARKMUSDT', 'WLDUSDT'
]

# Emerging & New
EMERGING_SYMBOLS = [
    'SUIUSDT', 'SEIUSDT', 'CYBERUSDT', 'ARKUSDT', 'IQUSDT',
    'NTRNUSDT', 'TIAUSDT', 'BEAMXUSDT', 'PIVXUSDT', 'VICUSDT',
    'BLURUSDT', 'VANRYUSDT', 'AEURUSDT', 'JOEUSDT', 'ACEUSDT',
    'NFPUSDT', 'BNTUSDT', 'AIUSDT', 'XAIUSDT', 'MANTAUSDT',
    'ALTUSDT', 'PYTHUSDT', 'RONINUSDT', 'DYMUSDT', 'PIXELUSDT',
    'STRKUSDT', 'PORTALUSDT', 'PDAUSDT', 'AXLUSDT', 'METISUSDT'
]

# –í—Å–µ —Å–∏–º–≤–æ–ª—ã –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ
ALL_SYMBOLS = (
    TOP_VOLUME_SYMBOLS + 
    STABLE_ALTCOINS + 
    DEFI_SYMBOLS + 
    GAMING_NFT_SYMBOLS + 
    LAYER1_SYMBOLS + 
    MEME_SYMBOLS + 
    EMERGING_SYMBOLS
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket –ø–æ—Ç–æ–∫–æ–≤
SHARDING_CONFIG = {
    # –í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è —Ç–æ–ø-—Å–∏–º–≤–æ–ª–æ–≤  
    'high_frequency': {
        'symbols': TOP_VOLUME_SYMBOLS[:10],  # –¢–æ–ø-10
        'streams': ['bookTicker', 'aggTrade', 'depth5@100ms'],
        'max_symbols_per_stream': 5
    },
    
    # –°—Ä–µ–¥–Ω–∏–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö altcoins
    'medium_frequency': {
        'symbols': TOP_VOLUME_SYMBOLS[10:] + STABLE_ALTCOINS,
        'streams': ['bookTicker', 'aggTrade'],
        'max_symbols_per_stream': 20
    },
    
    # –ù–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    'low_frequency': {
        'symbols': DEFI_SYMBOLS + GAMING_NFT_SYMBOLS + LAYER1_SYMBOLS + MEME_SYMBOLS + EMERGING_SYMBOLS,
        'streams': ['bookTicker'],
        'max_symbols_per_stream': 50
    }
}

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è depth –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–ø-—Å–∏–º–≤–æ–ª–æ–≤)
DEPTH_PRIORITY_SYMBOLS = TOP_VOLUME_SYMBOLS[:15]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞—Ç—á–µ–π –¥–ª—è PostgreSQL
BATCH_CONFIG = {
    'book_ticker': {
        'batch_size': 1000,
        'flush_interval': 5  # —Å–µ–∫—É–Ω–¥
    },
    'trades': {
        'batch_size': 500,
        'flush_interval': 3
    },
    'depth_events': {
        'batch_size': 100,
        'flush_interval': 2
    }
}

# Rate limiting –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
RATE_LIMITS = {
    'connections_per_stream': 5,  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–∞ –ø–æ—Ç–æ–∫
    'requests_per_minute': 1200,  # Binance limit
    'reconnect_delay': [1, 2, 5, 10, 30]  # Exponential backoff
}

def get_symbol_shards():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞—Ä–¥—ã —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è WebSocket –ø–æ—Ç–æ–∫–æ–≤"""
    shards = []
    
    # High frequency shards
    hf_config = SHARDING_CONFIG['high_frequency']
    symbols = hf_config['symbols']
    chunk_size = hf_config['max_symbols_per_stream']
    
    for i in range(0, len(symbols), chunk_size):
        chunk = symbols[i:i + chunk_size]
        for stream_type in hf_config['streams']:
            shards.append({
                'symbols': chunk,
                'stream_type': stream_type,
                'priority': 'high',
                'batch_config': BATCH_CONFIG.get(stream_type.split('@')[0], BATCH_CONFIG['book_ticker'])
            })
    
    # Medium frequency shards
    mf_config = SHARDING_CONFIG['medium_frequency']
    symbols = mf_config['symbols']
    chunk_size = mf_config['max_symbols_per_stream']
    
    for i in range(0, len(symbols), chunk_size):
        chunk = symbols[i:i + chunk_size]
        for stream_type in mf_config['streams']:
            shards.append({
                'symbols': chunk,
                'stream_type': stream_type,
                'priority': 'medium',
                'batch_config': BATCH_CONFIG.get(stream_type.split('@')[0], BATCH_CONFIG['book_ticker'])
            })
    
    # Low frequency shards
    lf_config = SHARDING_CONFIG['low_frequency']
    symbols = lf_config['symbols']
    chunk_size = lf_config['max_symbols_per_stream']
    
    for i in range(0, len(symbols), chunk_size):
        chunk = symbols[i:i + chunk_size]
        for stream_type in lf_config['streams']:
            shards.append({
                'symbols': chunk,
                'stream_type': stream_type,
                'priority': 'low',
                'batch_config': BATCH_CONFIG.get(stream_type.split('@')[0], BATCH_CONFIG['book_ticker'])
            })
    
    return shards

def get_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∏–º–≤–æ–ª–∞–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    shards = get_symbol_shards()
    
    return {
        'total_symbols': len(ALL_SYMBOLS),
        'total_shards': len(shards),
        'high_priority_symbols': len(TOP_VOLUME_SYMBOLS),
        'depth_enabled_symbols': len(DEPTH_PRIORITY_SYMBOLS),
        'shards_by_priority': {
            'high': len([s for s in shards if s['priority'] == 'high']),
            'medium': len([s for s in shards if s['priority'] == 'medium']),
            'low': len([s for s in shards if s['priority'] == 'low'])
        },
        'streams_breakdown': {
            stream: len([s for s in shards if stream in s['stream_type']])
            for stream in ['bookTicker', 'aggTrade', 'depth']
        }
    }

if __name__ == '__main__':
    print("üéØ MARKET DATA COLLECTION - SYMBOL CONFIGURATION")
    print("=" * 60)
    
    stats = get_stats()
    print(f"üìä –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {stats['total_symbols']}")
    print(f"üéØ –í—Å–µ–≥–æ —à–∞—Ä–¥–æ–≤: {stats['total_shards']}")
    print(f"‚≠ê –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {stats['high_priority_symbols']}")
    print(f"üßä Depth enabled: {stats['depth_enabled_symbols']}")
    print()
    
    print("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:")
    for priority, count in stats['shards_by_priority'].items():
        print(f"   {priority}: {count} —à–∞—Ä–¥–æ–≤")
    print()
    
    print("üì° –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –ø–æ—Ç–æ–∫–æ–≤:")
    for stream, count in stats['streams_breakdown'].items():
        print(f"   {stream}: {count} —à–∞—Ä–¥–æ–≤")