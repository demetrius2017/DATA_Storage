#!/usr/bin/env python3
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¢–ó
"""

import asyncio
import json
import sys
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import argparse
import requests
import websockets
from dataclasses import dataclass, asdict


@dataclass
class CollectorStatus:
    """–°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
    is_running: bool
    symbols: List[str]
    start_time: Optional[str]
    uptime_seconds: Optional[int]
    error: Optional[str]
    

@dataclass
class DatabaseStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î"""
    total_records: int
    records_last_hour: int
    records_last_day: int
    unique_symbols: List[str]
    last_update: str
    avg_updates_per_minute: float


@dataclass
class MonitoringData:
    """–î–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    timestamp: str
    collector_status: CollectorStatus
    database_stats: DatabaseStats
    system_metrics: Dict[str, Any]


class RemoteCollectorClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–º"""
    
    def __init__(self, server_url: str = "http://localhost:8000"):
        self.server_url = server_url.rstrip('/')
        self.ws_url = server_url.replace('http://', 'ws://').replace('https://', 'wss://') + "/ws/monitoring"
        
    def get_status(self) -> Optional[CollectorStatus]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
        try:
            response = requests.get(f"{self.server_url}/api/collector/status", timeout=10)
            response.raise_for_status()
            data = response.json()
            return CollectorStatus(**data)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return None
    
    def start_collector(self, symbols: List[str], database_url: str, log_level: str = "INFO") -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
        try:
            config = {
                "symbols": symbols,
                "database_url": database_url,
                "log_level": log_level
            }
            response = requests.post(
                f"{self.server_url}/api/collector/start",
                json=config,
                timeout=30
            )
            response.raise_for_status()
            result = response.json()
            if result.get("success"):
                print(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω —Å —Å–∏–º–≤–æ–ª–∞–º–∏: {symbols}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞: {e}")
            return False
    
    def stop_collector(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä"""
        try:
            response = requests.post(f"{self.server_url}/api/collector/stop", timeout=30)
            response.raise_for_status()
            result = response.json()
            if result.get("success"):
                print("‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞: {e}")
            return False
    
    def restart_collector(self) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä"""
        try:
            response = requests.post(f"{self.server_url}/api/collector/restart", timeout=60)
            response.raise_for_status()
            result = response.json()
            if result.get("success"):
                print("‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞: {e}")
            return False
    
    def get_database_stats(self) -> Optional[DatabaseStats]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î"""
        try:
            response = requests.get(f"{self.server_url}/api/database/stats", timeout=10)
            response.raise_for_status()
            data = response.json()
            return DatabaseStats(**data)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
            return None
    
    def validate_data_compliance(self) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –¢–ó"""
        try:
            response = requests.get(f"{self.server_url}/api/validation/compliance", timeout=30)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¢–ó: {e}")
            return None
    
    async def monitor_realtime(self, duration_minutes: int = 60):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ WebSocket"""
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ ({duration_minutes} –º–∏–Ω)")
        print("=" * 60)
        
        end_time = time.time() + (duration_minutes * 60)
        
        try:
            async with websockets.connect(self.ws_url) as websocket:
                while time.time() < end_time:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç WebSocket
                        data = await asyncio.wait_for(websocket.recv(), timeout=10)
                        monitoring_data = json.loads(data)
                        
                        # –í—ã–≤–æ–¥–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        self._display_monitoring_data(monitoring_data)
                        
                    except asyncio.TimeoutError:
                        print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                    except websockets.exceptions.ConnectionClosed:
                        print("‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                        break
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                        await asyncio.sleep(5)
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket: {e}")
    
    def _display_monitoring_data(self, data: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        timestamp = data.get('timestamp', datetime.now().isoformat())
        collector = data.get('collector_status', {})
        database = data.get('database_stats', {})
        system = data.get('system_metrics', {})
        
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –≤—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        print("\033[2J\033[H")  # Clear screen
        print(f"üîÑ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–û–õ–õ–ï–ö–¢–û–†–ê [{timestamp}]")
        print("=" * 60)
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
        status_icon = "üü¢" if collector.get('is_running') else "üî¥"
        print(f"\nüìä –ö–û–õ–õ–ï–ö–¢–û–†: {status_icon}")
        print(f"   –°—Ç–∞—Ç—É—Å: {'–ó–∞–ø—É—â–µ–Ω' if collector.get('is_running') else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        if collector.get('symbols'):
            print(f"   –°–∏–º–≤–æ–ª—ã: {', '.join(collector['symbols'])}")
        if collector.get('uptime_seconds'):
            uptime = timedelta(seconds=collector['uptime_seconds'])
            print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}")
        if collector.get('error'):
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {collector['error']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
        print(f"\nüóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {database.get('total_records', 0):,}")
        print(f"   –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {database.get('records_last_hour', 0):,}")
        print(f"   –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å: {database.get('records_last_day', 0):,}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(database.get('unique_symbols', []))}")
        print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏–π/–º–∏–Ω: {database.get('avg_updates_per_minute', 0):.1f}")
        if database.get('last_update'):
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {database['last_update']}")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        print(f"\n‚ö° –°–ò–°–¢–ï–ú–ê:")
        print(f"   CPU: {system.get('cpu_percent', 0):.1f}%")
        print(f"   –ü–∞–º—è—Ç—å: {system.get('memory_percent', 0):.1f}%")
        print(f"   –î–∏—Å–∫: {system.get('disk_percent', 0):.1f}%")
        print(f"   –°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {system.get('network_connections', 0)}")
        
        print("\n" + "=" * 60)
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    
    def show_summary(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        print("üìã –°–í–û–î–ö–ê –ü–û –ö–û–õ–õ–ï–ö–¢–û–†–£")
        print("=" * 50)
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
        status = self.get_status()
        if status:
            status_icon = "üü¢" if status.is_running else "üî¥"
            print(f"\n{status_icon} –ö–æ–ª–ª–µ–∫—Ç–æ—Ä: {'–ó–∞–ø—É—â–µ–Ω' if status.is_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
            if status.symbols:
                print(f"   –°–∏–º–≤–æ–ª—ã: {', '.join(status.symbols)}")
            if status.uptime_seconds:
                uptime = timedelta(seconds=status.uptime_seconds)
                print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
        db_stats = self.get_database_stats()
        if db_stats:
            print(f"\nüóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {db_stats.total_records:,}")
            print(f"   –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {db_stats.records_last_hour:,}")
            print(f"   –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å: {db_stats.records_last_day:,}")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(db_stats.unique_symbols)}")
            print(f"   –°–∏–º–≤–æ–ª—ã: {', '.join(db_stats.unique_symbols[:10])}" + 
                  ("..." if len(db_stats.unique_symbols) > 10 else ""))
            print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏–π/–º–∏–Ω: {db_stats.avg_updates_per_minute:.1f}")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¢–ó
        compliance = self.validate_data_compliance()
        if compliance:
            print(f"\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¢–ó:")
            validation_result = compliance.get('validation_result', {})
            if validation_result.get('is_valid'):
                print("   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¢–ó")
            else:
                print("   ‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è –¢–ó:")
                for error in validation_result.get('errors', []):
                    print(f"      - {error}")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¢–ó")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(description="–ö–ª–∏–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–º")
    parser.add_argument("--server", default="http://localhost:8000", 
                       help="URL —Å–µ—Ä–≤–µ—Ä–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞")
    
    subparsers = parser.add_subparsers(dest="command", help="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
    subparsers.add_parser("status", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞")
    
    # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞
    start_parser = subparsers.add_parser("start", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä")
    start_parser.add_argument("--symbols", nargs="+", required=True,
                             help="–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞")
    start_parser.add_argument("--database-url", required=True,
                             help="URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    start_parser.add_argument("--log-level", default="INFO",
                             choices=["DEBUG", "INFO", "WARNING", "ERROR"],
                             help="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    subparsers.add_parser("stop", help="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä")
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    subparsers.add_parser("restart", help="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä")
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î
    subparsers.add_parser("db-stats", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î")
    
    # –ö–æ–º–∞–Ω–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¢–ó
    subparsers.add_parser("validate", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó")
    
    # –ö–æ–º–∞–Ω–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor_parser = subparsers.add_parser("monitor", help="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    monitor_parser.add_argument("--duration", type=int, default=60,
                               help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö")
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å–≤–æ–¥–∫–∏
    subparsers.add_parser("summary", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    client = RemoteCollectorClient(args.server)
    
    try:
        if args.command == "status":
            status = client.get_status()
            if status:
                print(json.dumps(asdict(status), indent=2))
        
        elif args.command == "start":
            client.start_collector(args.symbols, args.database_url, args.log_level)
        
        elif args.command == "stop":
            client.stop_collector()
        
        elif args.command == "restart":
            client.restart_collector()
        
        elif args.command == "db-stats":
            stats = client.get_database_stats()
            if stats:
                print(json.dumps(asdict(stats), indent=2))
        
        elif args.command == "validate":
            result = client.validate_data_compliance()
            if result:
                print(json.dumps(result, indent=2))
        
        elif args.command == "monitor":
            asyncio.run(client.monitor_realtime(args.duration))
        
        elif args.command == "summary":
            client.show_summary()
            
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()