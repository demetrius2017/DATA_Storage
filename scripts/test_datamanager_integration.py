#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ DataManager —Å PostgreSQL
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é: DataManager ‚Üí PostgreSQL ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import json
import os
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/Users/dmitrijnazarov/Projects/DATA_Storage')

from collector.storage.data_manager import DataManager
from collector.storage.postgres_manager import PostgreSQLManager

async def test_datamanager_postgresql_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é DataManager —Å PostgreSQL"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò DataManager + PostgreSQL")
    print("=" * 60)
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_path = '/Users/dmitrijnazarov/Projects/DATA_Storage/config/production.json'
    with open(config_path) as f:
        config = json.load(f)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config['storage']['type']}")
    
    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataManager –¥–ª—è PostgreSQL
    data_manager = DataManager(
        output_dir="/tmp/test_orderbook",  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è PostgreSQL
        compress=True,
        config=config
    )
    
    print(f"‚úÖ DataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {data_manager.storage_type}")
    
    # 2.1. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL
    await data_manager.initialize()
    print("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # 3. –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ orderbook
    test_records = [
        {
            'symbol': 'BTCUSDT',
            'timestamp': time.time(),
            'local_timestamp': time.time(),
            'exchange': 'binance',
            'event_time': int(time.time() * 1000),
            'first_update_id': 1001,
            'final_update_id': 1002,
            'bids': [['50000.00', '1.5'], ['49999.00', '2.0']],
            'asks': [['50001.00', '1.0'], ['50002.00', '1.8']],
            'ask_amount': '1.0',
            'ask_price': '50001.00',
            'bid_price': '50000.00',
            'bid_amount': '1.5'
        },
        {
            'symbol': 'ETHUSDT',
            'timestamp': time.time() + 1,
            'local_timestamp': time.time() + 1,
            'exchange': 'binance',
            'event_time': int((time.time() + 1) * 1000),
            'first_update_id': 2001,
            'final_update_id': 2002,
            'bids': [['3000.00', '5.0'], ['2999.00', '3.0']],
            'asks': [['3001.00', '4.0'], ['3002.00', '2.5']],
            'ask_amount': '4.0',
            'ask_price': '3001.00',
            'bid_price': '3000.00',
            'bid_amount': '5.0'
        }
    ]
    
    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(test_records)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    
    # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DataManager
    print("\nüì¶ –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•:")
    
    for i, record in enumerate(test_records, 1):
        try:
            await data_manager.save_record(record)
            print(f"  ‚úÖ –ó–∞–ø–∏—Å—å {i}/{len(test_records)}: {record['symbol']}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {i}: {e}")
            return False
    
    # 5. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –±—É—Ñ–µ—Ä–∞ PostgreSQL
    if data_manager.postgres_manager:
        try:
            await data_manager.postgres_manager._flush_batch()
            print("  ‚úÖ Batch –±—É—Ñ–µ—Ä PostgreSQL —Å–±—Ä–æ—à–µ–Ω")
        except Exception as e:
            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±—É—Ñ–µ—Ä–∞: {e}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = data_manager.get_stats()
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê DataManager:")
    print(f"  ‚Ä¢ –¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è: {stats['storage_type']}")
    print(f"  ‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {stats['records_written']}")
    print(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {stats['buffer_size']}")
    
    if 'postgresql' in stats:
        pg_stats = stats['postgresql']
        print(f"  ‚Ä¢ PostgreSQL –∑–∞–ø–∏—Å–∏: {pg_stats.get('successful_inserts', 'N/A')}")
        print(f"  ‚Ä¢ PostgreSQL –æ—à–∏–±–∫–∏: {pg_stats.get('failed_inserts', 'N/A')}")
    
    # 7. –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í PostgreSQL:")
    
    if data_manager.postgres_manager and data_manager.postgres_manager.pool:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
            query = """
                SELECT symbol, timestamp, event_time, 
                       jsonb_array_length(bids) as bids_count,
                       jsonb_array_length(asks) as asks_count
                FROM orderbook_data 
                ORDER BY timestamp DESC 
                LIMIT 5
            """
            
            async with data_manager.postgres_manager.pool.acquire() as conn:
                rows = await conn.fetch(query)
                
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π –≤ –ë–î:")
                for row in rows:
                    print(f"    ‚Ä¢ {row['symbol']}: {row['bids_count']} bids, {row['asks_count']} asks")
                    
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    else:
        print("  ‚ö†Ô∏è PostgreSQL pool –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    # 8. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    await data_manager.shutdown()
    print("\n‚úÖ DataManager –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")
    
    print("\nüéØ –ò–¢–û–ì: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è DataManager + PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    return True

if __name__ == "__main__":
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
        from dotenv import load_dotenv
        load_dotenv('/Users/dmitrijnazarov/Projects/DATA_Storage/.env')
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
        result = asyncio.run(test_datamanager_postgresql_integration())
        
        if result:
            print("\nüü¢ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            sys.exit(0)
        else:
            print("\nüî¥ –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –¢–ï–°–¢–ê–•!")
            sys.exit(1)
            
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)