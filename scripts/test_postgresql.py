#!/usr/bin/env python3
"""
üîå PostgreSQL Connection Test –¥–ª—è Digital Ocean
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ managed database —Å –≤–∞—à–∏–º–∏ credentials
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_postgresql_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –Ω–∞ Digital Ocean"""
    
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
    print("=" * 50)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ .env
    connection_params = {
        'host': os.getenv('DB_HOST'),
        'port': int(os.getenv('DB_PORT', 25060)),
        'database': os.getenv('DB_NAME'),
        'user': os.getenv('DB_USER'),
        'password': os.getenv('DB_PASSWORD'),
        'ssl': 'require'
    }
    
    print(f"üè† Host: {connection_params['host']}")
    print(f"üîå Port: {connection_params['port']}")
    print(f"üóÑÔ∏è Database: {connection_params['database']}")
    print(f"üë§ User: {connection_params['user']}")
    print(f"üîê SSL: {connection_params['ssl']}")
    print("-" * 50)
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
        conn = await asyncpg.connect(**connection_params)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ PostgreSQL
        version = await conn.fetchval('SELECT version()')
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä PostgreSQL –≤–µ—Ä—Å–∏—è: {version}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        databases = await conn.fetch("SELECT datname FROM pg_database WHERE datistemplate = false")
        print(f"üóÑÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        for db in databases:
            print(f"   - {db['datname']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
        privileges = await conn.fetch("""
            SELECT table_schema, table_name, privilege_type 
            FROM information_schema.table_privileges 
            WHERE grantee = current_user 
            LIMIT 10
        """)
        print(f"üîë –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–≤—ã–µ 10):")
        for priv in privileges:
            print(f"   - {priv['table_schema']}.{priv['table_name']}: {priv['privilege_type']}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã...")
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS test_connection (
                id SERIAL PRIMARY KEY,
                test_data TEXT,
                created_at TIMESTAMP DEFAULT NOW()
            )
        """)
        
        # –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await conn.execute("""
            INSERT INTO test_connection (test_data) 
            VALUES ('Connection test successful')
        """)
        
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        result = await conn.fetchrow("SELECT * FROM test_connection ORDER BY id DESC LIMIT 1")
        print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è: {result['test_data']}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        await conn.execute("DROP TABLE IF EXISTS test_connection")
        print("üßπ –¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await conn.close()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ PostgreSQL –≥–æ—Ç–æ–≤ –¥–ª—è OrderBook –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å credentials –≤ .env —Ñ–∞–π–ª–µ")
        print("2. IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Trusted Sources PostgreSQL")
        print("3. Firewall –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ Digital Ocean")
        print("4. SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
        return False

async def test_connection_pool():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ connection pool"""
    
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ connection pool...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ pool —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        pool = await asyncpg.create_pool(
            host=os.getenv('DB_HOST'),
            port=int(os.getenv('DB_PORT', 25060)),
            database=os.getenv('DB_NAME'),
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD'),
            ssl='require',
            min_size=2,  # –£–º–µ–Ω—å—à–∏–ª –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            max_size=5,  # –£–º–µ–Ω—å—à–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            command_timeout=60,  # –£–≤–µ–ª–∏—á–∏–ª —Ç–∞–π–º–∞—É—Ç
            server_settings={
                'jit': 'off'  # –û—Ç–∫–ª—é—á–∞–µ–º JIT –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            }
        )
        
        print("‚úÖ Connection pool —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö
        successful = 0
        for i in range(5):  # –£–º–µ–Ω—å—à–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤
            try:
                async with pool.acquire() as conn:
                    result = await conn.fetchval("SELECT $1::text as query_id", str(i))  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ
                    if result == str(i):
                        successful += 1
                        print(f"  ‚úì –ó–∞–ø—Ä–æ—Å {i+1}: —É—Å–ø–µ—à–Ω–æ")
                    else:
                        print(f"  ‚úó –ó–∞–ø—Ä–æ—Å {i+1}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.1)
                
            except Exception as e:
                print(f"  ‚úó –ó–∞–ø—Ä–æ—Å {i+1}: –æ—à–∏–±–∫–∞ {e}")
        
        print(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful}/5")
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã pool
        async with pool.acquire() as conn:
            version = await conn.fetchval("SELECT 'Pool —Ä–∞–±–æ—Ç–∞–µ—Ç!' as message")
            print(f"üìù –¢–µ—Å—Ç pool: {version}")
        
        await pool.close()
        print("‚úÖ Connection pool –∑–∞–∫—Ä—ã—Ç")
        
        return successful >= 3  # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 3 —É—Å–ø–µ—à–Ω—ã—Ö –∏–∑ 5
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ connection pool: {e}")
        print(f"üí° –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False

async def test_single_query(pool, query_id):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ pool"""
    try:
        async with pool.acquire() as conn:
            result = await conn.fetchval("SELECT $1 as query_id", query_id)
            return result == query_id
    except Exception:
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ PostgreSQL –¥–ª—è Digital Ocean")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ credentials")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    async def run_all_tests():
        # –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connection_ok = await test_postgresql_connection()
        
        if connection_ok:
            # –¢–µ—Å—Ç connection pool
            pool_ok = await test_connection_pool()
            
            if pool_ok:
                print("\nüéØ –ò–¢–û–ì: PostgreSQL –≥–æ—Ç–æ–≤ –¥–ª—è production!")
                print("üí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQLManager")
            else:
                print("\n‚ö†Ô∏è –ò–¢–û–ì: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å pool")
        else:
            print("\n‚ùå –ò–¢–û–ì: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ PostgreSQL")
            print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    asyncio.run(run_all_tests())