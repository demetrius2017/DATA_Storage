name: "üî¨ Verify: Per-Symbol Ingestion (4 pairs)"

on:
  workflow_dispatch:
    inputs:
      symbols:
        description: 'Comma-separated symbols to verify'
        required: false
        default: 'SOLUSDT,FIOUSDT,MLNUSDT,GHSTUSDT'

jobs:
  probe:
    runs-on: ubuntu-latest
    steps:
      - name: üìÅ Checkout repository
        uses: actions/checkout@v4

      - name: üîå SSH and check symbols via monitoring API
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 60s
          command_timeout: 10m
          script: |
            set -e
            cd /opt/orderbook-collector
            echo '== /api/system =='
            curl -fsS http://localhost:8000/api/system || true
            echo
            echo '== /api/symbols (filtered) =='
            SYMS_INPUT='${{ github.event.inputs.symbols }}'
            if [ -z "$SYMS_INPUT" ]; then SYMS_INPUT='SOLUSDT,FIOUSDT,MLNUSDT,GHSTUSDT'; fi
            IFS=',' read -r -a SYMS_ARR <<< "$SYMS_INPUT"
            JSON=$(curl -fsS http://localhost:8000/api/symbols)
            MISSING=""
            for S in "${SYMS_ARR[@]}"; do
              S=$(echo "$S" | tr '[:lower:]' '[:upper:]' | tr -d ' ')
              if echo "$JSON" | grep -q "\"symbol\":\"$S\""; then
                echo "OK: $S present"
              else
                echo "MISS: $S not found"
                MISSING="$MISSING $S"
              fi
            done
            if [ -n "$(echo $MISSING | tr -d ' ')" ]; then
              echo "-- Fallback: DB-based verification via container --"
              # Find a container that has DATABASE_URL in env (more reliable than name matching)
              CID=$(for id in $(docker ps -q); do docker inspect -f '{{.Id}} {{range .Config.Env}}{{println .}}{{end}}' "$id" | grep -q '^DATABASE_URL=' && echo "$id" && break; done)
              if [ -z "$CID" ]; then
                echo "No container with DATABASE_URL env found"
                exit 1
              fi
              SYMS_CSV=$(printf "%s," "${SYMS_ARR[@]}" | sed 's/,$//')
              # Try in-container python tool first (if python present)
              set +e
              docker exec "$CID" /bin/sh -lc "python3 -m collector.tools.symbol_probe --symbols '$SYMS_CSV' --minutes 5 || python -m collector.tools.symbol_probe --symbols '$SYMS_CSV' --minutes 5" > /tmp/probe.json 2>/tmp/probe.err
              STATUS=$?
              set -e
              if [ $STATUS -ne 0 ]; then
                echo "Python not available or probe failed, falling back to psql"
                DBURL=$(docker inspect -f '{{range .Config.Env}}{{println .}}{{end}}' "$CID" | awk -F= '/^DATABASE_URL=/{print $2; exit}')
                if [ -z "$DBURL" ]; then
                  echo "DATABASE_URL not found in container env"
                  exit 1
                fi
                docker run --rm --network host -e DATABASE_URL="$DBURL" -e SYMS="$SYMS_CSV" postgres:15-alpine \
                  /bin/sh -lc "psql \"$DATABASE_URL\" -v ON_ERROR_STOP=1 -v syms=\"$SYMS\" -Atc \"WITH s AS (SELECT unnest(string_to_array(:'syms', ',')) AS symbol) SELECT s.symbol, COALESCE(COUNT(bt.*) FILTER (WHERE bt.ts_exchange >= NOW() - INTERVAL '5 minutes'), 0) AS bt_5m FROM s LEFT JOIN marketdata.symbols ms ON ms.symbol = s.symbol LEFT JOIN marketdata.book_ticker bt ON bt.symbol_id = ms.id GROUP BY s.symbol ORDER BY s.symbol;\"" \
                  > /tmp/probe_psql.txt 2>/tmp/probe_psql.err || true
                cat /tmp/probe_psql.txt || true
                if [ ! -s /tmp/probe_psql.txt ]; then
                  echo "psql fallback produced no output"
                  cat /tmp/probe_psql.err || true
                  exit 1
                fi
                FAIL=0
                while IFS='|' read -r SY C; do
                  SY=$(echo "$SY" | tr -d '[:space:]')
                  C=${C:-0}
                  echo "PSQL: $SY bt_5m=$C"
                  if [ -z "$SY" ]; then continue; fi
                  if [ "$C" -eq 0 ]; then FAIL=1; fi
                done < /tmp/probe_psql.txt
                if [ $FAIL -ne 0 ]; then
                  echo "DB fallback indicates missing/no-updates in last 5m"
                  exit 1
                fi
              else
                cat /tmp/probe.json || true
              fi
            fi
            echo "All symbols verified (API and/or DB fallback)."
