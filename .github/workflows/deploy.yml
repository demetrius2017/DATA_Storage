name: 🚀 Deploy PostgreSQL OrderBook Collector

on:
  push:
    branches: [master, main]
    paths:
      - 'collector/**'
      - 'Dockerfile'
      - 'docker-compose.production.yml'
      - 'requirements.txt'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/orderbook-collector

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📁 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🎯 Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY }}
          BINANCE_SECRET_KEY: ${{ secrets.BINANCE_SECRET_KEY }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e
            
            # 1) Подготовка окружения: Docker Engine + Compose (устойчиво к разным образам Ubuntu)
            # 1.a) Устанавливаем Docker из официального репозитория (если отсутствует)
            if ! command -v docker >/dev/null 2>&1; then
              apt-get update -y && apt-get install -y ca-certificates curl gnupg lsb-release
              install -m 0755 -d /etc/apt/keyrings
              if [ ! -f /etc/apt/keyrings/docker.gpg ]; then
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                chmod a+r /etc/apt/keyrings/docker.gpg
              fi
              . /etc/os-release
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu ${VERSION_CODENAME} stable" > /etc/apt/sources.list.d/docker.list
              apt-get update -y || true
              # Пытаемся установить полный набор пакетов Docker, включая compose plugin
              apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin || apt-get install -y docker.io
              systemctl enable --now docker || true
            fi

            # 1.b) Гарантируем наличие docker compose (v2) — fallback через установку бинаря как cli-plugin
            if ! docker compose version >/dev/null 2>&1; then
              echo "Docker Compose plugin not found via apt; installing manually..."
              mkdir -p /usr/local/lib/docker/cli-plugins
              OS=$(uname -s | tr '[:upper:]' '[:lower:]')
              case "$(uname -m)" in
                x86_64) ARCH="x86_64" ;;
                aarch64|arm64) ARCH="aarch64" ;;
                *) ARCH="$(uname -m)" ;;
              esac
              COMPOSE_VER="v2.27.1"
              curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VER}/docker-compose-${OS}-${ARCH}" -o /usr/local/lib/docker/cli-plugins/docker-compose
              chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            fi

            # 1.c) Убеждаемся, что curl установлен
            if ! command -v curl >/dev/null 2>&1; then
              apt-get update -y && apt-get install -y curl
            fi

            # 2) Рабочая директория
            mkdir -p /opt/orderbook-collector
            cd /opt/orderbook-collector

            # 3) Обновляем .env c секретами
            cat > .env << EOF
            DATABASE_URL=${DATABASE_URL}
            BINANCE_API_KEY=${BINANCE_API_KEY}
            BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
            LOG_LEVEL=INFO
            ENVIRONMENT=production
            EOF

            # 4) Забираем актуальный docker-compose.production.yml
            curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.yml \
                 -L https://api.github.com/repos/${{ github.repository }}/contents/docker-compose.production.yml

            # 5) Логин в GHCR (на случай приватного образа)
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin || true

            # 6) Рестарт через docker compose
            docker compose down || true
            docker compose pull
            docker compose up -d

            # 7) Проверка состояния
            # Даем сервисам больше времени на старт, т.к. создается пул соединений и выполняется миграция схемы
            sleep 30
            docker compose ps
            if ! curl -fsS http://localhost:8000/health; then
              echo "Health check failed. Dumping recent container logs..." >&2
              docker compose logs --no-color --tail=200 collector || true
              docker compose logs --no-color --tail=100 redis || true
              # Показать статус/рестарты
              docker ps -a --no-trunc || true
              exit 1
            fi

            echo "🎉 Deployment completed successfully!"

      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Image | ✅ Built and pushed |" >> $GITHUB_STEP_SUMMARY
          echo "| Server Deployment | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Check | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Symbols Count | 🎯 200 MM-focused pairs |" >> $GITHUB_STEP_SUMMARY
          echo "| Database | 🗄️ PostgreSQL + TimescaleDB |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Monitoring Dashboard:** http://${{ secrets.SERVER_HOST }}:8000" >> $GITHUB_STEP_SUMMARY
          echo "📊 **WebSocket Shards:** 5" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Market Maker Focus:** Starting from SOLUSDT" >> $GITHUB_STEP_SUMMARY