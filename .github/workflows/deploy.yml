name: 🚀 Deploy PostgreSQL OrderBook Collector

on:
  push:
    branches: [master, main]
    paths:
      - 'collector/**'
      - 'Dockerfile'
      - 'docker-compose.production.yml'
      - 'requirements.txt'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/orderbook-collector

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📁 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🎯 Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Навигация в рабочую директорию
            cd /opt/orderbook-collector || mkdir -p /opt/orderbook-collector && cd /opt/orderbook-collector
            
            # Создание .env файла с secrets
            cat > .env << EOF
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            BINANCE_API_KEY=${{ secrets.BINANCE_API_KEY }}
            BINANCE_SECRET_KEY=${{ secrets.BINANCE_SECRET_KEY }}
            EOF
            
            # Загрузка docker-compose файла
            curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.yml \
                 -L https://api.github.com/repos/${{ github.repository }}/contents/docker-compose.production.yml
            
            # Остановка старых контейнеров
            docker-compose down || true
            
            # Обновление образов
            docker-compose pull
            
            # Запуск новых контейнеров
            docker-compose up -d
            
            # Проверка состояния
            sleep 30
            docker-compose ps
            
            # Health check
            curl -f http://localhost:8000/health || exit 1
            
            echo "🎉 Deployment completed successfully!"

      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Image | ✅ Built and pushed |" >> $GITHUB_STEP_SUMMARY
          echo "| Server Deployment | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Check | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Symbols Count | 🎯 200 MM-focused pairs |" >> $GITHUB_STEP_SUMMARY
          echo "| Database | 🗄️ PostgreSQL + TimescaleDB |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Monitoring Dashboard:** http://${{ secrets.SERVER_HOST }}:8000" >> $GITHUB_STEP_SUMMARY
          echo "📊 **WebSocket Shards:** 5" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Market Maker Focus:** Starting from SOLUSDT" >> $GITHUB_STEP_SUMMARY