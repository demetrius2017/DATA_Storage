name: 🚀 Deploy PostgreSQL OrderBook Collector

on:
  push:
    branches: [master, main]
    paths:
      - 'collector/**'
      - 'Dockerfile'
      - 'docker-compose.production.yml'
      - 'requirements.txt'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

concurrency:
  group: production-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/orderbook-collector

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📁 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🎯 Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        # Передаем переменные окружения в удаленную сессию по списку envs
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY }}
          BINANCE_SECRET_KEY: ${{ secrets.BINANCE_SECRET_KEY }}
          BINANCE_BASE_URL: ${{ secrets.BINANCE_BASE_URL }}
          BINANCE_WS_URL: ${{ secrets.BINANCE_WS_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_DEPTH: ${{ secrets.ENABLE_DEPTH || 'true' }}
          DEPTH_TOP_SYMBOLS: ${{ secrets.DEPTH_TOP_SYMBOLS || 'BTCUSDT,ETHUSDT,SOLUSDT,BNBUSDT,XRPUSDT,AVAXUSDT,MATICUSDT,LINKUSDT,ADAUSDT,DOTUSDT' }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          envs: DATABASE_URL,BINANCE_API_KEY,BINANCE_SECRET_KEY,BINANCE_BASE_URL,BINANCE_WS_URL,GITHUB_TOKEN,ENABLE_DEPTH,DEPTH_TOP_SYMBOLS
          script: |
            set -e

            # 0) Глобальная блокировка на сервере, чтобы избежать гонок при параллельных деплоях
            # Если блок занят — выходим без ошибки (второй запуск уступает первому)
            exec 9>/var/lock/orderbook-deploy.lock || true
            if command -v flock >/dev/null 2>&1; then
              flock -n 9 || { echo "Another deploy is running, exiting"; exit 0; }
            fi
            
            # 1) Подготовка окружения: Docker Engine + Compose (устойчиво к разным образам Ubuntu)
            # 1.a) Устанавливаем Docker из официального репозитория (если отсутствует)
            if ! command -v docker >/dev/null 2>&1; then
              apt-get update -y && apt-get install -y ca-certificates curl gnupg lsb-release
              install -m 0755 -d /etc/apt/keyrings
              if [ ! -f /etc/apt/keyrings/docker.gpg ]; then
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                chmod a+r /etc/apt/keyrings/docker.gpg
              fi
              . /etc/os-release
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu ${VERSION_CODENAME} stable" > /etc/apt/sources.list.d/docker.list
              apt-get update -y || true
              # Пытаемся установить полный набор пакетов Docker, включая compose plugin
              apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin || apt-get install -y docker.io
              systemctl enable --now docker || true
            fi

            # 1.b) Гарантируем наличие docker compose (v2) — fallback через установку бинаря как cli-plugin
            if ! docker compose version >/dev/null 2>&1; then
              echo "Docker Compose plugin not found via apt; installing manually..."
              mkdir -p /usr/local/lib/docker/cli-plugins
              OS=$(uname -s | tr '[:upper:]' '[:lower:]')
              case "$(uname -m)" in
                x86_64) ARCH="x86_64" ;;
                aarch64|arm64) ARCH="aarch64" ;;
                *) ARCH="$(uname -m)" ;;
              esac
              COMPOSE_VER="v2.27.1"
              curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VER}/docker-compose-${OS}-${ARCH}" -o /usr/local/lib/docker/cli-plugins/docker-compose
              chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            fi

            # 1.c) Убеждаемся, что curl установлен
            if ! command -v curl >/dev/null 2>&1; then
              apt-get update -y && apt-get install -y curl
            fi

            # 2) Рабочая директория
            mkdir -p /opt/orderbook-collector
            cd /opt/orderbook-collector

            # 3) Обновляем .env c секретами (fallback к .env.production при пустом секрете)
            # Скачиваем .env.production из репозитория (на случай fallback)
            curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o env.production \
                 -L https://api.github.com/repos/${{ github.repository }}/contents/.env.production || true

            DB_URL_FROM_SECRET="${DATABASE_URL:-}"
            if [ -z "$DB_URL_FROM_SECRET" ] && [ -f env.production ]; then
              DB_URL_FROM_FILE=$(grep '^DATABASE_URL=' env.production | cut -d= -f2- | tr -d '\r')
            else
              DB_URL_FROM_FILE=""
            fi
            DB_URL=${DB_URL_FROM_SECRET:-$DB_URL_FROM_FILE}

            if [ -z "$DB_URL" ]; then
              echo "ERROR: DATABASE_URL is empty (no secret provided and no fallback)." >&2
              exit 1
            fi

            # Пишем .env для docker compose (не логируем значение)
            cat > .env << EOF
            DATABASE_URL=${DB_URL}
            BINANCE_API_KEY=${BINANCE_API_KEY}
            BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
            BINANCE_BASE_URL=${BINANCE_BASE_URL:-https://fapi.binance.com}
            BINANCE_WS_URL=${BINANCE_WS_URL:-wss://fstream.binance.com/ws/}
            LOG_LEVEL=INFO
            ENVIRONMENT=production
            ENABLE_DEPTH=${ENABLE_DEPTH:-true}
            DEPTH_TOP_SYMBOLS=${DEPTH_TOP_SYMBOLS:-BTCUSDT,ETHUSDT,SOLUSDT,BNBUSDT,XRPUSDT,AVAXUSDT,MATICUSDT,LINKUSDT,ADAUSDT,DOTUSDT}
            EOF

            # 4) Забираем актуальный docker-compose.production.yml
            curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.yml \
                 -L https://api.github.com/repos/${{ github.repository }}/contents/docker-compose.production.yml

            # 5) Логин в GHCR (на случай приватного образа)
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin || true

            # 6) Отчет по использованию диска ДО очистки
            echo "== Docker disk usage (before) =="
            docker system df -v || true

            # 7) Подтягиваем свежие образы заранее (явно указываем env-file)
            docker compose --env-file .env pull

            # 8) Останавливаем и удаляем предыдущий стек, включая сирот
            docker compose down --remove-orphans || true

            # 9) Поднимаем сервисы на свежих образах (с env-file)
            docker compose --env-file .env up -d

            # 10) Пост-очистка: удаляем остановленные контейнеры, старые/неиспользуемые образы, неиспользуемые сети и тома
            # Важно: image prune с -a и фильтром по давности, чтобы не трогать свежие теги
            docker container prune -f || true
            docker image prune -a -f --filter "until=168h" || true
            docker network prune -f || true
            docker volume prune -f || true

            # 11) Отчет по использованию диска ПОСЛЕ очистки
            echo "== Docker disk usage (after) =="
            docker system df -v || true

            # 12) Проверка состояния
            # Даем сервисам больше времени на старт, т.к. создается пул соединений и выполняется миграция схемы
            sleep 30
            docker compose ps
            if ! curl -fsS http://localhost:8000/health; then
              echo "Health check failed. Dumping recent container logs..." >&2
              docker compose logs --no-color --tail=200 collector || true
              docker compose logs --no-color --tail=100 redis || true
              # Диагностика переменных окружения внутри контейнера (без утечки пароля)
              echo "--- Collector DB endpoint (masked) ---" >&2
              docker compose exec -T collector python3 -c "import os; from urllib.parse import urlparse, parse_qs; u=os.getenv('DATABASE_URL'); print('DATABASE_URL set:', bool(u)); p=urlparse(u) if u else None; q=parse_qs(p.query) if u else {}; print('host=', getattr(p,'hostname',None), 'port=', getattr(p,'port',None), 'db=', ((p.path or '/')[1:] if p else None), 'ssl=', q)" || true
              # Показать статус/рестарты
              docker ps -a --no-trunc || true
              exit 1
            fi

            echo "🎉 Deployment completed successfully!"

      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Image | ✅ Built and pushed |" >> $GITHUB_STEP_SUMMARY
          echo "| Server Deployment | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Check | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Symbols Count | 🎯 200 MM-focused pairs |" >> $GITHUB_STEP_SUMMARY
          echo "| Database | 🗄️ PostgreSQL + TimescaleDB |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Monitoring Dashboard:** http://${{ secrets.SERVER_HOST }}:8000" >> $GITHUB_STEP_SUMMARY
          echo "📊 **WebSocket Shards:** 5" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Market Maker Focus:** Starting from SOLUSDT" >> $GITHUB_STEP_SUMMARY